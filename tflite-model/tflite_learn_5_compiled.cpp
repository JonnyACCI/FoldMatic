/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.02.2024 02:06:59

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 17302, -31943, -23545, -26800, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00027065479662269354, 0.00017158831178676337, 0.00023827643599361181, 0.00020884396508336067, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ -5,-42,-94,-62,97,-4,34,-23,90,2,12,3,-79,-36,-4,-17,18,-59,-76,-36,-8,31,-31,88,11,14,-17,-22,127,-59,-4,3, 
  /* [1][0][][] */ 62,79,-89,-12,-35,43,121,48,-58,-48,-100,43,98,-55,57,-126,127,-107,24,-70,7,-107,-92,-36,-4,-92,72,-61,-42,-115,-48,-23, 
  /* [2][0][][] */ -33,81,21,77,-30,-9,75,27,-68,-93,75,-65,-80,65,-127,48,37,40,65,-68,-10,21,-38,-38,25,-33,70,-78,-38,15,38,50, 
  /* [3][0][][] */ 72,-65,58,21,-13,101,44,-3,-11,-111,31,91,66,-10,-121,-17,101,-78,94,-43,-127,-18,-5,-54,73,-36,-89,99,-111,111,14,54, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0047100563533604145, 0.0029860567301511765, 0.0041465936228632927, 0.0036343964748084545, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 433, -168, -492, -199, -556, 47, -27, -40, 308, 1095, 224, 242, 346, -373, 1002, -273, 82, -480, -423, -237, 265, 601, -178, 877, -204, -329, 102, -74, 1286, -307, 46, -185, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.9777328968048096e-05, 4.7877463657641783e-05, 4.6166969696059823e-05, 5.3138577641220763e-05, 4.2287309042876586e-05, 4.611863914760761e-05, 4.0895938582252711e-05, 4.8081532440846786e-05, 4.7813566197874025e-05, 5.3862822824157774e-05, 5.2464347390923649e-05, 4.4168835302116349e-05, 5.0582759286044165e-05, 4.4665372115559876e-05, 5.8997429732698947e-05, 4.6916848077671602e-05, 4.4422096834750846e-05, 4.3163716327399015e-05, 4.7632449422962964e-05, 5.3335879783844575e-05, 5.6730234064161777e-05, 5.1613053074106574e-05, 5.6002190831350163e-05, 5.1654722483363003e-05, 4.0858005377231166e-05, 4.2880037653958425e-05, 5.5037275160429999e-05, 5.7682336773723364e-05, 6.5767701016739011e-05, 4.574344347929582e-05, 4.3188341805944219e-05, 4.5153345126891509e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -26,-28,101,14,77,-5,-67,-86,59,-72,-82,22,55,8,-19,58,-44,-22,-88,-54,-73,-80,6,107,-75,4,83,-35,90,-52,-14,-63,57,-44,-98,75,-88,-64,-90,32,77,-65,-74,93,67,-96,94,-9,-1,-81,-56,85,-90,-30,-84,99,56,29,89,-88,-86,66,-39,37,-45,26,69,83,45,92,44,-101,59,-76,38,82,-127,16,-42,53,62,18,74,-6,-34,-18,-94,107,18,97,-10,-94,19,73,-2,5, 
  /* [1][0][][] */ -41,21,-64,-12,-62,104,30,16,65,-71,-98,106,68,-30,20,43,94,-54,27,100,-29,-10,25,26,12,26,-46,92,3,30,84,-64,55,90,-15,30,39,48,2,-68,-63,2,-25,-88,-49,34,-44,-56,-30,-78,127,64,11,56,-72,-33,14,89,44,57,-24,86,-66,-96,-27,27,62,39,49,26,10,8,-98,51,-60,38,85,-51,-42,72,-80,81,-16,-99,21,102,-81,-68,78,75,80,16,79,110,37,-12, 
  /* [2][0][][] */ 36,19,-73,87,-27,-47,73,85,-91,49,-46,76,112,-11,61,-109,-61,-35,90,23,-93,-23,99,2,-42,62,71,6,-74,72,65,56,-60,-12,-72,-122,-87,80,88,-34,-127,-87,-1,-22,-100,95,-34,-74,91,29,69,-95,-10,58,10,-7,-75,113,-67,4,-29,49,-38,61,95,13,37,71,-103,51,19,-87,44,-73,46,11,-50,-29,-3,-5,10,-88,3,-73,-19,-111,-13,-65,84,102,-37,-3,-65,-79,-25,-60, 
  /* [3][0][][] */ 71,-12,27,-6,-58,56,-91,49,47,-13,54,-25,104,83,54,-3,85,75,-26,7,106,-73,-52,-99,-42,-71,-93,82,41,-48,66,-40,-33,-13,0,-43,-83,-14,49,53,-27,-87,-83,0,38,32,-39,-64,59,-62,55,4,94,17,84,-81,-114,-69,-82,-48,-60,27,-10,55,86,-44,-51,-11,-28,-62,15,61,50,-85,64,-46,44,78,80,-65,-90,-81,58,65,8,29,-26,-127,-57,53,11,-124,68,-90,-22,61, 
  /* [4][0][][] */ 35,94,-18,28,-30,-31,18,5,38,87,-21,30,26,-43,-25,-78,-31,-15,-63,9,102,-105,79,13,-37,-10,49,-73,-53,34,-75,-62,63,107,0,-111,-55,-16,-124,34,-62,-76,-88,-98,17,98,28,43,13,-46,-21,-84,-97,40,-95,8,6,-97,22,8,2,-76,-43,-74,-50,43,-12,-56,29,-116,-104,-94,-59,10,100,39,56,-30,-22,-75,-9,-55,-103,-34,-12,58,85,-8,-127,-86,28,41,25,97,-103,-17, 
  /* [5][0][][] */ 84,-83,73,57,34,-104,24,39,79,-126,0,-42,22,90,36,33,58,58,-127,94,22,47,14,-24,-89,-57,-11,-96,42,0,10,-108,-67,1,-94,11,-108,-30,3,22,-78,-53,40,94,-21,22,37,-49,-118,66,30,31,-5,4,38,-15,105,16,-43,-40,17,-65,50,-79,-33,93,-27,12,85,-1,58,-74,-44,80,-13,-71,-10,-47,9,72,100,46,24,87,-75,84,-21,37,56,-92,100,75,-14,26,71,-85, 
  /* [6][0][][] */ 30,-50,122,75,-85,-38,1,82,-25,-84,13,-81,85,63,126,-127,45,0,-15,109,-72,-123,114,67,-62,-81,-8,-61,-30,-98,48,-90,-98,-117,-67,-120,-13,47,-94,91,95,65,27,-10,-113,119,-92,-46,-95,7,-7,-55,59,-72,107,-18,13,-14,-62,113,-85,-12,88,-73,-43,72,106,-45,63,-5,-115,2,67,-82,-89,-42,-72,-107,-56,-25,36,-7,72,-20,-73,-80,-59,-93,94,105,102,-5,-45,-38,91,-42, 
  /* [7][0][][] */ 106,53,-33,-38,-51,125,-16,0,104,6,-84,31,73,-81,42,66,44,12,-6,111,54,30,-11,79,-44,98,40,46,-70,127,-23,35,22,24,45,80,-102,75,4,-21,85,-64,77,62,45,2,87,-102,37,-56,-78,-49,-22,61,18,35,102,-73,17,-60,19,-22,79,-98,-43,-46,58,27,-118,22,57,80,87,7,45,52,-40,43,-88,48,82,-13,8,-52,79,34,-112,94,75,7,81,63,-46,-4,1,-72, 
  /* [8][0][][] */ 8,37,-33,-84,27,4,-66,-23,0,52,42,70,-44,-38,-73,-56,-55,85,-59,-24,20,-15,87,102,-119,97,40,74,-66,-23,-66,66,90,-32,59,7,125,3,-38,50,70,97,-104,-101,-17,-35,-21,99,33,-89,-72,-16,-63,-3,-39,-104,24,90,-97,108,78,57,16,115,-51,-48,-11,72,-103,33,27,3,60,61,11,26,-58,111,76,77,23,66,-127,-104,27,34,83,-66,27,-47,-91,49,-73,-121,-82,50, 
  /* [9][0][][] */ 33,24,112,56,75,-71,-14,-90,49,45,18,54,-23,-46,-59,2,33,19,-70,-48,20,107,-56,-53,98,2,18,38,3,-48,-57,104,48,5,72,5,-23,34,-16,-22,60,-25,59,-52,73,22,-56,62,56,8,-67,-26,69,-29,-44,98,98,-34,-15,30,-64,108,92,-37,-39,23,113,50,-16,93,127,-29,16,78,-74,-53,-62,-60,-11,95,40,16,75,24,-17,-50,56,-6,96,29,-15,88,106,10,27,-15, 
  /* [10][0][][] */ -26,66,81,-41,-27,71,94,44,43,18,24,-74,66,75,-24,5,-24,62,-58,-82,-5,32,54,-54,13,55,-114,-89,-35,53,-77,-95,73,87,127,57,-28,9,-13,32,-29,89,-83,-30,-86,-50,-4,-33,0,8,33,1,69,17,-47,-27,-98,-10,28,-31,-1,77,84,15,95,-72,-71,-9,-1,-5,-73,-65,86,61,-49,92,-11,59,63,10,53,-3,65,64,-86,48,94,-48,41,22,7,-60,-48,-78,-3,-28, 
  /* [11][0][][] */ 117,18,-2,114,127,59,57,45,121,102,-78,109,-19,-95,37,-93,-48,-102,73,60,19,78,29,-100,-85,-88,-19,82,85,-4,35,-43,-93,-62,52,52,-60,77,-26,-34,-26,94,-73,11,-23,-58,-93,-80,74,90,100,48,-97,-80,30,37,-14,-102,-41,-92,-87,95,97,9,1,78,-50,50,117,53,-76,-82,9,127,-79,60,-71,37,-37,89,-96,-49,-60,-50,47,-69,-19,-37,-95,-19,38,-119,-98,-18,-105,-24, 
  /* [12][0][][] */ 4,70,-36,0,88,3,-22,7,-64,58,-3,49,-36,9,53,-53,-80,-16,-77,-52,9,-1,15,95,-26,-32,105,-83,77,3,-29,116,-87,-56,-58,29,5,-58,-43,40,111,47,-83,-26,4,-68,-25,103,-46,-127,-57,98,-2,-1,-65,89,3,-75,45,57,43,96,6,51,86,45,-33,87,75,95,-2,67,55,111,-13,2,-43,32,-93,-53,-31,101,18,22,-15,43,34,123,-93,-95,71,54,98,17,-1,52, 
  /* [13][0][][] */ 111,-68,80,88,85,127,71,79,71,-127,0,-58,104,88,52,-61,-108,-69,-32,28,85,-34,112,-54,-107,42,-23,19,-65,-59,76,19,43,104,-14,16,-91,-27,43,69,-68,61,-46,7,-60,31,-3,-24,27,117,-41,-90,-65,38,99,-79,-68,51,-17,-69,-6,109,-57,0,-23,-73,-95,90,-42,5,106,-9,-66,41,-52,-52,-74,60,74,-83,42,-94,120,13,-92,-112,96,97,13,-36,-57,36,119,-60,113,30, 
  /* [14][0][][] */ -37,-54,73,92,48,-56,10,-99,-35,1,81,74,-72,-43,-50,-9,-32,-7,-22,4,-40,55,21,64,-24,-41,19,11,-109,-116,-10,44,91,20,-6,13,92,96,-2,-67,19,-54,46,75,63,-84,73,-57,97,-11,46,41,44,18,-26,15,-33,42,30,105,-7,-68,-41,127,-69,7,85,-47,-94,-41,-56,89,39,51,20,-41,18,-51,60,100,41,20,-103,-9,-56,-43,-20,94,67,1,41,-19,59,94,-54,50, 
  /* [15][0][][] */ 0,-32,-34,90,97,-98,56,-75,74,-13,-64,1,104,2,-92,-92,76,0,-75,7,46,15,64,93,76,52,21,92,27,62,53,-94,0,1,-42,2,-61,95,127,-64,6,107,-46,-28,11,-74,-51,-64,-5,-60,-17,20,-66,-93,-52,-33,63,64,-40,105,-39,-61,-17,88,-37,91,-66,11,-60,6,75,-66,25,-21,48,-95,12,50,99,63,-82,65,-92,-63,-113,-49,-78,39,82,66,-89,-31,37,70,-90,108, 
  /* [16][0][][] */ -65,2,104,-66,42,124,-48,41,40,43,-98,86,-21,-44,-43,-58,106,80,32,69,109,79,-39,56,-15,58,-58,57,-95,19,40,10,-116,82,32,53,-37,58,-50,-58,28,-42,77,92,74,106,102,-9,-67,-127,21,117,-57,100,74,56,30,63,71,9,112,98,47,62,52,19,-34,90,47,100,-53,-13,31,93,70,85,-8,94,-102,-9,21,-65,74,17,16,107,81,20,76,19,-15,109,73,-8,-72,13, 
  /* [17][0][][] */ 31,-105,18,70,-40,-127,-79,-107,36,-91,75,32,105,52,-124,42,22,50,102,100,-101,-25,5,-65,20,56,-81,23,94,-75,-36,68,-26,-27,16,15,-58,94,-98,-41,-100,-47,-26,-17,4,5,81,-120,82,92,-14,19,-15,75,89,-82,-118,83,-91,-120,33,-108,73,105,-90,-83,31,-116,-112,-6,102,30,9,-120,-62,54,109,-57,29,-67,5,-22,-83,-95,-121,68,73,-40,13,67,-106,-121,-12,85,1,13, 
  /* [18][0][][] */ -97,81,90,-90,-20,-101,-104,-5,-11,61,-104,-56,-37,21,46,-63,6,-27,36,-19,82,-52,8,-83,12,-96,-21,90,18,29,-9,39,36,-33,-112,-103,-40,24,-49,45,-43,-8,-60,-18,-103,7,16,-11,10,-30,52,13,-105,-23,3,73,-53,17,-19,-127,66,91,2,27,-71,-112,-39,69,55,-82,-72,90,-92,-36,-92,-102,36,39,-11,-77,-57,-15,-39,-64,82,-43,52,51,-108,-76,-65,89,59,-54,35,-26, 
  /* [19][0][][] */ 6,21,48,32,26,-45,78,67,76,-71,18,-27,-88,36,-50,48,72,-75,89,101,-5,60,-43,12,15,-103,14,-41,-70,-86,-58,67,97,-62,1,-2,8,-48,-55,-76,36,-101,-76,10,-79,22,75,-89,5,42,-40,48,-21,43,8,-4,38,103,-27,-3,44,-43,112,84,-54,4,-22,3,44,30,79,-36,-62,-87,-48,-65,-17,-90,10,83,59,-122,-29,70,-68,2,20,15,88,31,6,62,-14,127,63,-35, 
  /* [20][0][][] */ -2,47,59,102,-29,84,29,41,40,51,-52,36,39,69,36,-33,-33,-27,-27,-12,32,-21,-53,-39,73,-56,-57,46,22,65,-21,127,72,26,15,57,43,-25,23,-87,-56,0,-48,-72,-21,-42,-48,83,44,-71,-78,53,52,88,33,0,77,81,94,74,106,-48,-62,-24,-30,-22,-27,26,-93,-23,-16,97,-58,-84,-5,28,103,63,93,111,79,11,67,25,65,91,-7,93,24,76,21,79,31,54,-32,7, 
  /* [21][0][][] */ 71,53,76,-62,93,-50,77,26,27,-40,-56,33,-9,23,-34,-65,-66,-27,74,-21,89,-21,80,-60,42,-40,-35,86,37,3,4,-49,37,13,3,-107,127,82,-83,-29,-7,10,24,-9,-90,-84,-70,99,7,-20,-42,69,64,55,-66,14,-56,58,-37,116,8,-10,-15,-23,71,20,-9,-50,-117,2,80,57,34,-21,88,68,-89,-1,66,76,5,60,32,-90,28,-93,76,-99,-76,69,108,-105,-70,-62,53,-4, 
  /* [22][0][][] */ 15,-42,-44,-89,114,-62,76,35,-81,50,-67,-96,96,-91,-92,-68,27,82,-68,-48,48,-57,24,11,102,18,-80,66,-24,-54,-54,-104,40,41,28,2,1,-19,-55,-55,-3,-17,1,66,43,-97,66,-19,-40,-54,20,-34,-43,-83,-31,33,-45,-14,-9,-25,83,-30,-52,-70,-36,3,-89,-3,127,87,-20,-13,-16,39,63,-73,17,-40,45,74,79,-70,-71,-95,50,60,92,-38,-65,5,-12,45,16,-9,-1,100, 
  /* [23][0][][] */ 65,-47,27,61,54,-113,19,-99,67,-50,91,61,-39,-82,26,-3,86,-17,-81,14,74,-46,110,-13,-6,-2,84,37,52,0,78,-75,-23,22,41,39,113,-7,-125,15,-85,17,5,-76,-63,-83,97,29,84,-96,-66,-68,60,-80,-54,60,-76,-26,90,62,-105,-66,-67,25,-40,36,-74,-77,26,-30,103,-48,0,-48,-28,-55,26,8,96,127,-47,-24,0,-99,92,15,120,-39,-77,30,87,-11,74,-70,-88,56, 
  /* [24][0][][] */ -106,-59,-114,-75,-121,-124,-76,-104,65,117,83,46,119,60,-49,-125,-90,43,27,-75,101,-88,-63,-46,45,-39,76,59,112,50,1,-94,-8,1,53,24,-62,-99,43,-24,-85,-111,105,-4,12,-44,38,74,-107,-49,-26,6,75,52,74,-85,-13,81,35,-7,88,-7,10,99,-109,95,-52,-94,-118,52,-58,-37,-37,10,92,104,65,-84,-112,-94,-88,-105,-66,-127,-3,59,-16,-124,26,-112,7,-86,-38,29,-97,33, 
  /* [25][0][][] */ -10,-52,-89,-23,115,-76,-120,74,24,-114,-45,3,79,6,-121,-31,-76,34,41,-103,63,69,-13,-68,5,-56,-127,43,70,-87,34,102,119,-121,33,75,95,-54,6,-15,-91,89,-127,7,95,42,78,34,-80,94,-71,-2,52,-27,-69,11,-18,69,-86,78,126,39,117,88,17,64,-31,-6,-75,-36,-25,-114,43,-77,119,14,62,72,4,3,31,59,-57,73,-91,-39,-97,-103,-31,-58,100,18,-106,-7,-9,-87, 
  /* [26][0][][] */ 40,-100,-7,3,-60,29,1,-2,-73,-73,91,81,-57,-38,12,-7,90,23,-60,-44,25,62,77,20,56,58,19,39,16,46,-72,11,-17,-48,-76,-82,-51,59,-13,88,-77,94,49,29,-63,65,-43,82,-18,33,10,96,16,-48,0,-76,72,61,56,13,25,-86,41,-12,100,-3,-39,62,-102,71,74,87,70,-101,-91,14,63,-85,-67,21,-15,78,91,-30,70,0,-43,27,-55,96,20,23,-41,127,38,58, 
  /* [27][0][][] */ 6,16,-49,-103,-78,-59,-60,-20,5,64,19,-64,7,45,66,-45,65,-2,15,-50,-72,3,-17,-19,-93,50,-75,-17,73,-18,-22,-1,30,54,-80,-51,-57,-37,-127,69,-61,-3,28,21,87,23,64,82,60,59,48,-49,-81,-44,14,-13,99,-34,-92,-52,-51,-8,2,1,41,-37,-89,65,91,15,-120,-3,45,-2,32,-78,23,-45,55,63,71,-43,75,-50,-59,-49,-17,17,-32,0,-24,5,49,-14,85,62, 
  /* [28][0][][] */ 82,17,81,58,-71,-46,-31,-38,0,-35,67,47,-127,-35,20,109,84,97,-51,8,-11,53,-33,-21,-58,45,-19,-4,-47,-64,31,-3,-52,22,98,69,61,-63,-17,32,83,57,-47,51,-66,1,19,51,50,-35,-83,-16,-33,40,20,10,58,0,51,83,5,-18,-85,37,9,71,27,77,-75,30,-27,-3,50,7,-15,-26,-72,-1,-23,49,-28,-55,48,-1,72,-56,79,-43,-59,-37,-12,-45,-16,18,-96,-36, 
  /* [29][0][][] */ 47,45,46,-53,-77,-14,-114,5,87,-44,-89,-101,120,-91,-47,-53,-90,89,65,-74,-75,-34,52,-4,-39,17,-59,-34,-89,-30,90,-49,50,3,-57,-66,-9,100,-26,92,41,79,-46,74,-4,92,-49,-18,20,-8,69,-105,85,-103,109,42,-111,59,-50,108,-127,107,-78,-69,-45,-82,48,76,117,-88,35,-92,119,95,88,14,89,-57,-31,19,-22,-84,9,-111,44,104,51,38,-33,95,67,69,-97,-36,38,68, 
  /* [30][0][][] */ 8,-56,-59,31,-90,11,-68,-11,107,-33,-2,-64,-100,21,59,-9,1,34,60,-96,37,-100,-104,11,-115,36,-89,123,-8,-127,-102,-50,-79,-77,-103,-48,26,-14,-2,20,88,-81,-15,102,108,-40,102,66,-43,60,12,-117,72,-65,-3,103,-109,-76,-69,-51,-120,12,-69,-18,-65,-93,-94,74,-58,99,47,-48,-47,111,54,-84,-76,-63,-78,-63,17,20,-110,-68,-119,25,-86,89,-45,-118,86,42,-38,-40,27,-77, 
  /* [31][0][][] */ 77,-85,29,85,36,50,-58,-98,-49,-18,-75,-90,91,-106,-46,105,-58,-89,23,35,63,33,-30,100,33,-114,28,33,-74,-83,41,93,7,16,-96,-4,94,-27,-66,-112,59,-67,-32,31,1,-59,-39,25,64,18,81,-31,-115,-67,-79,17,-108,51,3,112,-26,-5,83,-72,55,105,-44,-84,64,-127,-113,19,-95,-45,6,2,-58,-45,46,72,-76,-40,54,46,54,93,-93,8,18,-48,-86,-72,22,98,-7,-26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021155364811420441, 0.002034792210906744, 0.0019620961975306273, 0.0022583894897252321, 0.0017972105415537953, 0.0019600421655923128, 0.0017380773788318038, 0.0020434651523828506, 0.0020320764742791653, 0.0022891699336469173, 0.0022297347895801067, 0.0018771754112094641, 0.002149767242372036, 0.0018982782494276762, 0.0025073906872421503, 0.0019939660560339689, 0.0018879390554502606, 0.0018344579730182886, 0.0020243790931999683, 0.0022667748853564262, 0.0024110348895192146, 0.0021935547702014446, 0.0023800930939614773, 0.002195325680077076, 0.0017364651430398226, 0.0018224015366286039, 0.0023390841670334339, 0.0024514992255717516, 0.0027951272204518318, 0.0019440962933003902, 0.0018355045467615128, 0.0019190170569345355, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -3271, 3459, 7654, 2768, -3933, -3920, 23951, 2531, 3033, -2091, 11308, -107, -11416, 2537, 15071, 6422, 17779, 5268, -4226, -7460, 5306, 37379, 18449, 16044, 1228, 1090, 5181, 3016, 2189, -6146, 9871, -2629, -264, 3600, 136, 779, 6789, 5237, -1953, 7021, 10716, 6207, 7893, 13605, 5605, 4417, 2192, 12111, 8726, -5261, -6944, 815, -365, -1008, 2936, 23, 242, -1117, -5060, 12173, -999, 1887, -1712, -1903, -4759, 7805, 33730, 2135, -4152, 1599, 1625, 2202, 2248, -1729, 501, 9532, -797, 16452, 22877, -672, 7792, 1785, -437, 1115, 11219, 11017, 5067, 1517, 5888, 3989, -474, -8703, 898, -2085, -1941, -3989, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00020706543000414968, 0.0004500633804127574, 0.00031568243866786361, 0.0003247584099881351, 0.00026083720149472356, 0.00038578797830268741, 0.00013762316666543484, 0.00027025648159906268, 0.00018792283663060516, 0.00032020255457609892, 0.00017630976799409837, 0.00023622717708349228, 0.00021993594418745488, 0.0011134634260088205, 0.00020411855075508356, 0.00018368329619988799, 0.00010466057574376464, 0.00027791605680249631, 0.0004653200157918036, 0.00022664808784611523, 0.00011584083404159173, 7.2977520176209509e-05, 0.00016539881471544504, 0.00010453961294842884, 0.00014708031085319817, 0.00044692237861454487, 0.0005802428349852562, 0.00035934415063820779, 0.00022300821729004383, 0.00031788484193384647, 0.00014698592713102698, 0.00026090050232596695, 0.00014267598453443497, 0.00031512230634689331, 0.00038875913014635444, 0.00034132198197767138, 0.00028214100166223943, 0.00020331879204604775, 0.00032659395947121084, 0.00025184371042996645, 0.00012092327233403921, 0.00041798813617788255, 0.00019120324577670544, 0.00017039923113770783, 0.00033790490124374628, 0.00022281908604782075, 0.00023504541604779661, 0.00018070299120154232, 0.00015904173778835684, 0.00025191236636601388, 0.0002184023178415373, 0.00015656993491575122, 0.00038543081609532237, 0.00026689347578212619, 0.00026236186386086047, 0.00028855956043116748, 0.00046792931971140206, 0.00025400449521839619, 0.00030366569990292192, 0.00015546994109172374, 0.00074882898479700089, 0.00034398934803903103, 0.00015913783863652498, 0.00038792128907516599, 0.00039517370169050992, 0.00024568644585087895, 6.4441119320690632e-05, 0.00018432477372698486, 0.0002782634983304888, 0.00022822065511718392, 0.00026919748052023351, 0.00025167310377582908, 0.00061177898896858096, 0.0002195161214331165, 0.00028000149177387357, 0.00022519474441651255, 0.00022031685512047261, 0.00011299648031126708, 7.9605175415053964e-05, 0.00015997493756003678, 0.00018852904031518847, 0.00016801954188849777, 0.00018779509991873056, 0.0002408778527751565, 0.00016192308976314962, 0.00021474561071954668, 0.00048018165398389101, 0.00019217527005821466, 0.00011952264321735129, 0.00050843105418607593, 0.0002048990863841027, 0.00022585794795304537, 0.00026600540149956942, 0.00046582109644077718, 0.00031800323631614447, 0.00010752853268058971, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -63,127,-1,-106,-60,-5,-26,-78,-29,-31,27,105,11,-71,2,46, 
  /* [1][0][][] */ -32,21,-50,10,-48,-4,35,-91,51,57,-59,36,16,2,54,-127, 
  /* [2][0][][] */ 8,11,-8,7,30,28,-76,-52,127,-33,11,22,-14,79,-84,33, 
  /* [3][0][][] */ 19,-31,-9,-127,8,-44,-20,11,91,21,51,38,-11,10,28,97, 
  /* [4][0][][] */ -67,69,41,46,61,11,3,40,-10,-27,19,-39,-127,-18,-13,12, 
  /* [5][0][][] */ 24,70,78,31,-36,101,-85,93,-54,74,-53,-20,61,-46,-127,44, 
  /* [6][0][][] */ 78,-88,120,-127,55,1,-21,125,-74,-91,33,-48,22,121,6,125, 
  /* [7][0][][] */ 51,127,-36,-37,99,15,-25,-19,119,69,-64,0,81,-31,71,40, 
  /* [8][0][][] */ 15,-84,21,-54,33,-46,23,-44,30,34,46,-8,33,127,74,54, 
  /* [9][0][][] */ -5,-26,-19,127,35,-20,22,-48,-59,104,23,-5,-5,-68,22,-11, 
  /* [10][0][][] */ -20,-1,-50,-127,-19,3,24,37,43,-26,32,-6,-30,-33,6,45, 
  /* [11][0][][] */ 36,20,35,-12,72,-57,105,-100,-98,59,-26,43,5,127,-96,-40, 
  /* [12][0][][] */ 36,-1,-116,-36,40,-58,7,72,61,44,-42,-64,10,127,88,38, 
  /* [13][0][][] */ -6,22,-21,19,21,-127,-4,25,-8,-11,-11,-18,25,-19,10,-6, 
  /* [14][0][][] */ 10,-15,67,-30,48,-2,-127,-75,-25,-29,9,-4,14,-52,-28,-30, 
  /* [15][0][][] */ -69,5,-4,-33,-42,-4,127,26,-30,53,30,8,11,48,18,4, 
  /* [16][0][][] */ 34,59,127,79,1,7,83,73,-102,21,-110,-44,28,8,-37,-82, 
  /* [17][0][][] */ -57,-108,-18,50,-79,-2,-65,33,-127,-50,24,-27,16,38,68,-46, 
  /* [18][0][][] */ 19,39,-1,46,55,-29,2,-8,63,14,-29,-35,12,127,61,25, 
  /* [19][0][][] */ 48,-21,50,37,65,6,-73,-64,-80,-43,-67,-127,-24,-39,-42,-15, 
  /* [20][0][][] */ 127,-21,-61,-26,43,-68,15,30,-47,6,-103,-52,18,0,5,2, 
  /* [21][0][][] */ 35,-57,102,-70,-58,8,-1,54,-30,-84,73,21,-64,127,-4,83, 
  /* [22][0][][] */ 8,36,-32,127,-19,3,53,70,13,13,-15,40,16,9,31,10, 
  /* [23][0][][] */ 18,-2,86,-87,23,-17,-44,-4,0,27,16,-32,-36,-14,-127,21, 
  /* [24][0][][] */ -127,47,6,-17,-4,115,27,-12,2,8,111,24,-81,23,77,-27, 
  /* [25][0][][] */ 28,16,4,20,10,9,57,-47,8,-127,1,3,-3,-19,19,30, 
  /* [26][0][][] */ -59,0,-10,-8,-70,-12,-54,-51,-123,-22,9,-31,-4,127,-55,60, 
  /* [27][0][][] */ 9,25,-1,64,42,-18,-6,-17,60,6,-35,-10,12,127,1,22, 
  /* [28][0][][] */ -14,58,76,55,127,1,25,12,-88,-14,-38,-41,-15,101,24,-38, 
  /* [29][0][][] */ -5,-9,10,50,46,21,6,49,-15,-8,-10,-127,2,-2,-24,3, 
  /* [30][0][][] */ -14,112,-69,98,-43,-32,37,-127,-51,54,-37,-9,105,33,102,98, 
  /* [31][0][][] */ -15,-16,15,-116,-26,-14,-53,-96,-32,91,-38,-127,-40,-57,10,0, 
  /* [32][0][][] */ -127,-76,-3,68,49,39,8,21,-9,-50,-122,48,70,11,35,73, 
  /* [33][0][][] */ 16,-17,-32,-4,-73,-5,-75,-8,53,-2,8,-31,50,-95,127,19, 
  /* [34][0][][] */ 40,-15,41,45,46,15,-17,85,-69,-54,72,32,11,-9,-23,127, 
  /* [35][0][][] */ -44,21,-46,-15,-22,-41,38,-127,62,96,-28,-4,-25,-5,45,-82, 
  /* [36][0][][] */ -12,2,16,79,17,38,127,4,14,32,20,36,-34,22,-50,-3, 
  /* [37][0][][] */ 41,-7,-15,-58,21,-3,-44,-19,-56,-22,-6,-2,20,-127,70,-9, 
  /* [38][0][][] */ 52,80,0,-48,127,-6,28,-9,122,69,-14,-10,37,-6,53,30, 
  /* [39][0][][] */ -45,94,-19,-102,5,26,-73,49,49,-127,-52,-8,50,59,59,6, 
  /* [40][0][][] */ -54,-40,57,-118,-30,-13,-21,-77,-127,15,27,-11,-67,-120,66,-83, 
  /* [41][0][][] */ 13,-18,-50,3,32,-40,38,-2,-9,11,-45,9,-127,23,55,49, 
  /* [42][0][][] */ 127,98,-41,-46,-86,-61,-48,-61,-17,25,78,-80,-86,54,70,-124, 
  /* [43][0][][] */ -74,124,-59,-22,41,-14,54,-36,33,60,-35,-36,25,-127,-70,-80, 
  /* [44][0][][] */ -103,-3,39,-54,35,2,-109,-127,-36,11,14,-17,-26,-45,55,-121, 
  /* [45][0][][] */ -6,46,-127,-16,18,-66,-21,-13,31,2,-37,-78,86,-27,41,-16, 
  /* [46][0][][] */ -17,-1,-4,-88,-14,10,8,-37,-125,-24,2,-11,-9,-127,58,-50, 
  /* [47][0][][] */ 13,41,27,-17,127,-7,-10,3,-60,46,11,26,-18,5,108,-26, 
  /* [48][0][][] */ -127,-102,-9,64,82,25,62,-16,-6,-11,-125,69,63,6,83,76, 
  /* [49][0][][] */ 52,-25,56,76,127,-11,70,52,-87,-25,-30,-46,40,115,50,-36, 
  /* [50][0][][] */ 44,20,-127,5,28,-126,-54,-5,25,-61,-14,-21,85,-34,9,5, 
  /* [51][0][][] */ 6,23,45,4,20,3,-12,-12,-123,57,13,-127,-23,-100,-50,80, 
  /* [52][0][][] */ 26,48,-6,53,72,8,39,69,74,63,-34,-59,68,127,76,28, 
  /* [53][0][][] */ 1,-58,-24,-38,-86,-4,-89,-26,41,30,32,-68,20,-127,117,21, 
  /* [54][0][][] */ 24,7,-62,6,90,56,-127,9,-55,-36,-53,-79,55,-49,6,-43, 
  /* [55][0][][] */ 32,-10,38,-7,41,-32,-83,-127,-45,-58,-56,11,-24,-20,3,-26, 
  /* [56][0][][] */ -25,21,19,-30,-4,-21,-101,52,-21,127,0,-7,15,8,-15,10, 
  /* [57][0][][] */ 3,9,-24,-39,-53,-48,104,89,-11,9,0,17,36,51,127,7, 
  /* [58][0][][] */ 4,1,-127,-7,51,75,-16,49,-85,0,15,-28,-35,15,-2,9, 
  /* [59][0][][] */ -68,40,84,13,-66,-46,127,93,23,22,37,2,-2,3,37,21, 
  /* [60][0][][] */ -23,-22,-57,-7,33,-127,1,-8,-23,-8,13,-49,-1,-13,-1,-10, 
  /* [61][0][][] */ 25,1,34,127,84,20,9,2,-102,-10,5,42,1,6,35,-63, 
  /* [62][0][][] */ -53,127,15,-45,-30,-8,-91,52,-21,-62,-100,-66,-23,-95,-72,-34, 
  /* [63][0][][] */ -30,19,-14,127,-84,-4,-38,-22,-44,19,-28,-31,30,72,57,40, 
  /* [64][0][][] */ -3,3,24,65,-31,32,-28,86,33,-1,-35,-48,12,-127,39,-9, 
  /* [65][0][][] */ -38,-40,23,-127,24,-18,41,-52,-11,64,11,-106,-41,7,1,-44, 
  /* [66][0][][] */ 28,-38,81,-60,-41,-13,-23,101,6,-50,42,57,-29,127,-38,122, 
  /* [67][0][][] */ -14,39,-8,-127,-12,-7,-61,24,69,-83,-14,-9,19,71,45,30, 
  /* [68][0][][] */ -78,94,127,33,13,17,-40,-5,-67,-51,-27,-24,49,-52,120,-84, 
  /* [69][0][][] */ 124,96,11,-18,-96,-41,-58,-88,-10,39,95,-86,-118,67,21,-127, 
  /* [70][0][][] */ 63,-2,-36,-13,-11,19,61,127,-30,76,-30,2,-6,61,-22,20, 
  /* [71][0][][] */ 3,-1,-9,2,8,-71,4,4,-39,15,-64,-12,-127,-10,17,43, 
  /* [72][0][][] */ -15,27,-127,24,16,31,20,102,-36,-37,18,-1,32,-1,17,-6, 
  /* [73][0][][] */ -55,43,65,16,69,-20,-104,-127,19,-127,33,0,32,-69,44,-57, 
  /* [74][0][][] */ -23,31,31,127,23,1,-91,101,-60,-4,-27,70,35,-111,72,-108, 
  /* [75][0][][] */ 7,34,-52,16,40,-3,-20,-40,122,19,-4,-7,18,127,-38,4, 
  /* [76][0][][] */ 13,-17,-21,23,15,-21,5,70,20,-32,-22,-127,0,-5,11,19, 
  /* [77][0][][] */ -26,35,-26,127,-29,28,75,77,24,37,38,39,-12,-10,25,-14, 
  /* [78][0][][] */ 24,-11,20,-85,43,-24,16,91,44,-41,15,-8,59,127,60,62, 
  /* [79][0][][] */ -30,-91,-78,-39,-118,7,33,-59,127,13,18,67,14,44,27,-30, 
  /* [80][0][][] */ -86,6,127,-95,-36,-26,3,-94,-94,47,-22,-71,12,78,42,-40, 
  /* [81][0][][] */ -63,16,-127,25,66,-116,9,54,8,-13,69,-9,7,21,3,5, 
  /* [82][0][][] */ 127,1,-6,-1,25,-99,-26,30,-11,-16,-91,1,105,1,-6,28, 
  /* [83][0][][] */ -58,90,-64,-95,-37,-5,5,-94,25,12,-40,-127,7,23,12,40, 
  /* [84][0][][] */ -14,2,53,-26,-2,-10,96,-127,-22,67,3,-44,13,73,26,38, 
  /* [85][0][][] */ -87,126,24,-127,-70,-40,-49,-18,-46,-15,-68,12,6,-17,-114,-36, 
  /* [86][0][][] */ -19,24,-21,2,-59,2,127,18,-19,-44,11,57,7,21,81,-26, 
  /* [87][0][][] */ -42,-36,-1,-127,-6,-35,34,-32,-18,14,13,-114,-33,9,-4,-37, 
  /* [88][0][][] */ 114,-4,28,-32,5,-127,-21,37,-45,40,-120,-50,44,-3,35,7, 
  /* [89][0][][] */ 54,-26,-42,-42,34,-15,-23,3,-35,7,13,-67,127,-7,16,-15, 
  /* [90][0][][] */ -16,-36,31,-58,69,9,-89,91,53,-83,-47,-34,-7,114,10,-127, 
  /* [91][0][][] */ -53,-22,-28,-16,41,-31,15,-109,8,61,8,-127,-62,15,-27,25, 
  /* [92][0][][] */ -24,22,41,12,-5,-127,13,-4,-13,-25,-5,-23,-6,-25,2,-1, 
  /* [93][0][][] */ 65,-6,127,-21,-47,33,12,-54,-37,18,-54,-17,-36,-8,5,-4, 
  /* [94][0][][] */ 31,2,-30,-14,30,-3,-7,12,-30,-35,-2,-37,127,-31,50,-34, 
  /* [95][0][][] */ 127,108,-8,49,-52,9,-60,-7,-38,-57,100,-28,-52,24,103,-96, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00066236016573384404, 0.0014396611368283629, 0.0010098038474097848, 0.0010388360824435949, 0.00083436514250934124, 0.0012340572429820895, 0.00044022849760949612, 0.00086449552327394485, 0.00060112692881375551, 0.0010242628632113338, 0.00056397909065708518, 0.00075564265716820955, 0.00070353032788261771, 0.0035617428366094828, 0.00065293372608721256, 0.00058756547514349222, 0.0003347878810018301, 0.00088899687398225069, 0.0014884640695527196, 0.00072500109672546387, 0.00037055124994367361, 0.00023344023793470114, 0.00052907713688910007, 0.00033440094557590783, 0.0004704799794126302, 0.0014296137960627675, 0.0018560787430033088, 0.0011494688224047422, 0.00071335793472826481, 0.0010168489534407854, 0.0004701780853793025, 0.00083456764696165919, 0.00045639145537279546, 0.0010080120991915464, 0.0012435613898560405, 0.0010918196057900786, 0.00090251170331612229, 0.00065037544118240476, 0.0010447076056152582, 0.00080559682101011276, 0.00038680894067510962, 0.0013370589585974813, 0.00061162025667726994, 0.00054507248569279909, 0.0010808890219777822, 0.00071275292430073023, 0.00075186247704550624, 0.0005780321080237627, 0.00050874217413365841, 0.00080581638030707836, 0.00069862458622083068, 0.00050083536189049482, 0.00123291474301368, 0.00085373793262988329, 0.00083924218779429793, 0.00092304329155012965, 0.0014968106988817453, 0.00081250868970528245, 0.00097136478871107101, 0.00049731670878827572, 0.0023953516501933336, 0.0011003519175574183, 0.00050904956879094243, 0.0012408812763169408, 0.0012640802888199687, 0.00078590097837150097, 0.00020613403466995806, 0.00058961746981367469, 0.00089010829105973244, 0.00073003146098926663, 0.00086110801203176379, 0.00080505106598138809, 0.0019569564610719681, 0.00070218741893768311, 0.00089566776296123862, 0.00072035216726362705, 0.00070474878884851933, 0.00036145275225862861, 0.0002546407631598413, 0.00051172729581594467, 0.00060306605882942677, 0.00053746032062917948, 0.00060071831103414297, 0.00077051925472915173, 0.00051795900799334049, 0.00068692752392962575, 0.0015360034303739667, 0.00061472959350794554, 0.00038232860970310867, 0.0016263674478977919, 0.00065543048549443483, 0.00072247360367327929, 0.00085089716594666243, 0.0014900668757036328, 0.0010172276524826884, 0.00034396190312691033, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -907, 29219, -803, -11238, -9843, -511, 16057, -47690, -17074, 31463, 13281, -2191, -7982, 21324, -21631, 11285, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00083221076056361198, 0.00036813714541494846, 0.00031875367858447134, 0.00029526613070629537, 0.00033820621320046484, 0.00036345949047245085, 0.00040947072557173669, 0.00032220323919318616, 0.00032366128289140761, 0.00030369864543899894, 0.00075861398363485932, 0.00054222147446125746, 0.00037930990220047534, 0.00023803695512469858, 0.00054098910186439753, 0.00042726565152406693, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -32,-6,8,-32,-3,-17,-40,-25,12,-5,-19,-23,11,-29,-36,4,-6,8,-5,6,16,-53,-7,20,-13,7,-1,127,18,-36,36,-16,19,20,13,7,-30,-11,-65,5,-47,11,-6,33,5,14,11,2,24,-16,-5,10,34,14,-9,67,4,9,-24,-37,-24,-24,0,-20,-58,-57,-13,50,-3,-3,-5,-14,1,-17,1,-36,-55,7,5,7,-18,-38,18,31,-25,-13,-16,-96,14,-22,-4,-1,47,-15,-42,-15, 
  /* [1][0][][] */ 47,-87,-81,-62,127,-4,75,14,-44,-112,-51,-57,-7,-43,-59,65,-38,-12,54,60,31,98,-38,-56,8,14,-23,-80,27,-31,-65,43,-35,21,5,-11,-27,-35,-1,41,-71,30,-56,-21,-40,97,18,-13,22,-54,-2,-23,-16,18,66,13,-49,-11,-12,-67,8,-99,-8,-42,-110,112,-12,-13,-51,-21,-52,17,70,-103,-21,-9,24,-88,-23,8,-10,-60,31,6,-20,21,-58,23,22,-68,-28,60,20,15,49,116, 
  /* [2][0][][] */ 55,21,-31,-2,36,60,13,41,17,-127,1,25,-27,6,15,75,11,8,-66,32,-18,4,82,-14,59,58,-23,-63,28,0,36,-43,20,53,-30,-13,-79,-34,50,25,24,-76,29,7,15,-17,-15,25,0,34,-13,-81,50,-36,23,43,25,-32,40,-5,15,43,7,-36,32,-28,5,-4,-52,32,36,-31,-71,-71,-3,55,82,44,-18,6,33,-66,2,-20,12,32,47,32,-24,23,3,-49,13,-50,-11,27, 
  /* [3][0][][] */ 23,17,30,4,34,-46,43,30,-14,-28,2,-33,8,34,60,54,-21,18,17,16,127,0,9,40,-1,-60,18,34,23,-19,4,63,-87,15,-3,29,-18,1,41,24,-36,19,80,-37,8,3,-13,-44,-47,-13,-21,97,-11,-87,-14,33,-84,85,-25,35,5,82,3,-10,26,57,-12,-38,22,-9,-13,-10,54,-41,23,-21,-24,4,73,50,-5,-32,-14,-14,-39,-4,21,36,28,-23,52,50,14,61,24,-63, 
  /* [4][0][][] */ 6,11,17,-33,127,43,-4,-48,-69,-24,-43,-81,-36,4,-12,53,31,-85,-47,122,-1,33,2,2,-16,-32,7,-24,-3,-27,48,-43,103,-9,-25,21,17,-23,-12,15,-83,-2,-50,-67,2,-60,-16,6,35,-13,-26,55,21,-27,13,-14,10,-8,-43,13,-29,-6,70,57,26,52,-28,-9,-64,5,4,89,44,-70,-29,-44,-9,0,77,-42,-24,-41,5,-9,-87,6,-1,50,-41,16,15,8,5,11,12,-39, 
  /* [5][0][][] */ 47,-21,-38,23,17,-21,36,6,-16,-41,-13,12,-21,33,30,-7,-22,23,5,14,40,-5,-56,51,16,-13,44,-83,12,19,24,8,-33,21,1,-33,27,31,41,38,48,10,34,-37,-34,-7,2,1,-16,14,14,-1,-33,4,-3,-70,-9,49,-59,35,67,63,-19,49,0,60,-7,93,17,102,12,27,20,-5,-20,68,-35,8,23,21,0,-15,-22,-5,17,8,12,127,-13,21,8,-24,0,13,-73,-22, 
  /* [6][0][][] */ -6,-56,-11,-24,-34,-4,54,32,35,-2,-18,-33,-12,21,-35,4,-10,22,-1,-25,-27,-9,24,25,-25,-23,2,2,1,14,41,-8,40,26,59,16,16,13,12,-95,30,92,21,-39,-1,-20,-6,48,-19,29,-15,66,-35,-19,-25,1,-2,-45,-32,18,-8,88,43,-74,28,-29,4,-6,32,-21,127,0,-55,-10,-38,20,-92,19,69,11,51,68,1,3,-50,1,60,19,26,28,63,-56,-14,-8,-43,-27, 
  /* [7][0][][] */ -21,127,15,12,80,23,49,-16,-32,-1,7,-41,1,19,31,2,-11,-19,-10,52,72,-24,-4,35,-48,-29,35,14,-2,-17,17,-4,35,25,-34,20,14,12,-4,57,-57,38,4,-15,-29,-30,41,-31,-23,-31,30,65,19,-1,-43,22,25,44,-53,-3,-24,-32,9,35,-44,90,-18,-49,11,-34,-27,57,-3,-20,2,-5,-21,50,64,-15,-45,-16,-28,-8,-44,24,-10,-14,10,9,-26,-20,-37,-9,3,-35, 
  /* [8][0][][] */ -65,32,36,30,-114,-26,69,-8,24,125,45,10,10,31,10,-27,-79,22,25,20,-12,-24,-127,102,-4,-65,85,18,2,22,-13,39,72,-14,27,34,-36,-41,-23,15,6,-14,30,7,-39,-20,60,32,-94,-2,10,84,-37,-26,-44,52,8,-34,-99,-6,19,-42,-22,24,7,100,-28,-42,54,-33,-82,-23,70,43,50,-17,-59,-47,50,14,-104,52,-34,1,-16,23,65,55,44,-35,57,62,9,6,6,-4, 
  /* [9][0][][] */ -36,-81,0,32,37,77,-45,-43,59,-77,54,90,6,2,32,-74,7,-23,-13,2,-59,-76,50,9,13,24,-35,-6,-15,2,-6,-16,21,28,-45,39,31,16,-52,37,-10,-62,-25,84,0,-1,-47,-35,0,-7,-13,-127,59,23,9,-37,26,54,9,-13,21,-63,-11,83,-67,-41,26,-32,-1,-9,-44,-90,30,-7,5,9,46,-45,31,3,-5,-23,8,34,-28,-43,34,-36,21,-1,-75,-20,-40,4,27,17, 
  /* [10][0][][] */ -22,-20,-24,-45,-6,2,50,6,44,21,32,57,16,15,-7,-13,-21,27,-31,-38,-16,-1,32,1,-1,-14,22,-127,25,-40,61,-29,-3,1,-12,-18,25,64,26,-3,58,-25,43,-49,8,3,19,16,-8,28,-24,-52,-47,-24,-5,-50,0,16,-8,-21,57,84,16,-3,-20,89,-13,-50,41,-17,37,-17,-41,0,14,60,24,67,15,7,-5,11,14,17,7,2,26,125,-12,18,29,-15,22,-37,38,-42, 
  /* [11][0][][] */ -84,27,-26,16,34,-76,-4,40,-46,5,8,43,18,54,-11,-27,35,16,-61,-55,27,-19,-9,-4,73,-14,102,13,-13,28,-25,15,-26,29,-14,2,5,32,68,0,47,23,36,-19,84,8,82,29,60,71,-1,54,-15,-57,15,-13,-74,3,-72,-23,7,34,-4,27,12,-6,10,12,51,28,16,42,-18,3,2,14,-15,114,-84,77,-23,28,-82,-89,127,16,74,1,8,54,4,-69,-20,49,-41,-32, 
  /* [12][0][][] */ -9,14,-71,-15,48,20,-7,-26,-47,48,-11,-63,5,-62,60,-36,-44,-10,5,29,25,32,-89,63,-61,-9,0,109,-41,15,-27,-1,-17,38,18,26,-57,-47,11,-7,-43,-5,-45,-33,-18,-28,28,7,-6,19,-7,44,4,21,-13,-40,-25,46,-19,-4,-33,-107,-5,89,26,-45,2,89,-43,-127,-85,81,39,-6,19,70,-55,-31,-24,-12,-42,13,-42,-7,3,-44,-41,-68,-7,-9,-2,60,-31,31,-48,8, 
  /* [13][0][][] */ -110,42,28,10,-79,-12,-19,13,-7,-37,20,41,95,14,-57,-11,-35,45,-68,-41,15,-49,33,-41,73,19,-28,2,8,-13,-38,-87,-48,18,25,50,13,38,0,-15,-51,74,1,-6,66,29,16,30,83,-30,56,38,73,-8,71,-35,-9,42,23,23,-11,67,-24,21,1,-38,12,11,24,15,32,-127,-3,-38,-71,24,13,38,-5,-19,81,2,-6,-20,6,-36,92,22,20,14,-3,-27,25,-24,-35,-22, 
  /* [14][0][][] */ -41,35,-63,-47,63,-5,31,24,-94,21,27,-20,-23,-20,-63,-37,-88,5,88,51,38,20,20,-91,-43,-16,-12,6,44,-31,-17,-11,-96,-48,15,36,-21,-8,28,-30,23,105,-59,-43,-26,2,12,30,116,-31,0,37,30,44,-98,43,-42,28,-127,3,-19,-3,35,25,14,38,-12,-3,-42,35,27,37,60,-22,-37,16,36,-74,-16,-91,19,17,-10,34,41,-75,-52,17,-42,5,62,101,-1,27,-17,-12, 
  /* [15][0][][] */ -65,-70,-13,-35,-7,-7,-7,-63,-6,19,-23,-24,63,-1,59,-29,-113,21,-23,1,-4,-34,-81,-26,-32,-33,-13,13,-17,-14,77,-85,12,57,27,38,10,35,-105,-13,18,-65,1,9,-31,-42,53,37,50,-5,18,-127,-8,87,-31,23,40,3,-41,46,3,34,64,5,5,0,-5,7,0,-4,6,37,-47,-8,-4,-46,-81,15,52,14,-2,63,-15,66,-45,-50,-23,-35,-15,65,42,56,-44,6,-8,-34, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.035368956625461578, 0.015645828098058701, 0.013547031208872795, 0.012548810802400112, 0.014373763464391232, 0.015447027981281281, 0.017402505502104759, 0.01369363721460104, 0.013755603693425655, 0.01290719211101532, 0.0322410948574543, 0.023044411092996597, 0.016120670363306999, 0.010116570629179478, 0.022992037236690521, 0.018158789724111557, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 20482, 60107, 393, -1319, 14239, -3716, -511, -1247, 4547, 14586, -5445, -1724, 1178, 1867, 5136, -9685, -4094, -160, -282, 7288, -10821, 20080, -1579, 8010, 30917, 760, 664, 20485, 12516, -19464, 1103, 25336, 24401, -12211, 1547, -9, 1627, -2693, 1652, -10556, -5012, -166, -5584, -358, 32292, -2332, 12799, -1316, -14326, 4363, 92, 89, -4368, 20105, -6215, 15429, 22755, -398, 44835, -794, -7792, -675, 2539, 690, -3158, 11541, -592, -6107, 473, 1782, -393, -6583, 889, 38, -5105, -7553, -1164, -2258, 37929, -8948, -7075, -8711, -1464, 1046, 42437, -13938, -9898, -27086, -5275, 8170, -1318, 36168, -1213, -557, -532, -2305, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012053167301928625, 9.4543858722317964e-05, 0.00010002012277254835, 0.00024169418611563742, 0.00023692662944085896, 0.00019990990404039621, 6.4443636802025139e-05, 0.00010010770347435027, 0.00028267025481909513, 0.00017084805585909635, 0.00022590978187508881, 0.00013847784430254251, 0.00024829935864545405, 0.00023747910745441914, 0.00033875828376039863, 0.00013656674127560109, 0.00020353459694888443, 0.00023411420988850296, 0.00022894192079547793, 0.00016815622802823782, 8.2232196291442961e-05, 4.7581444960087538e-05, 0.00017700875469017774, 8.8979395513888448e-05, 7.4907249654643238e-05, 0.00011357781477272511, 0.00017045870481524616, 0.00014048113371245563, 7.5036536145489663e-05, 0.00042637175647541881, 0.00039460562402382493, 0.00022022424673195928, 0.00014116321108303964, 0.00014148269838187844, 0.0003185823152307421, 0.0004010869306512177, 0.00061631842982023954, 0.00014196161646395922, 0.00034580248757265508, 8.0021949543152004e-05, 0.00022969802375882864, 0.0002048841561190784, 0.00040674451156519353, 8.7214648374356329e-05, 0.00040854001417756081, 0.00011972030188189819, 9.759626118466258e-05, 0.00021769446902908385, 0.00072062166873365641, 9.354187932331115e-05, 0.00050152424955740571, 0.00020230440713930875, 0.00013062341895420104, 0.00013566359120886773, 0.00013982875680085272, 0.00010541607480263337, 0.0001240820565726608, 0.00046016517444513738, 4.0395738324150443e-05, 0.00020824982493650168, 0.00031898714951239526, 0.00026534323114901781, 0.00011494991485960782, 0.00017651020607445389, 0.00015546286886092275, 0.00016116225742734969, 0.00034408256760798395, 0.00036035140510648489, 0.00020877986389677972, 0.00016732281073927879, 0.00020408286945894361, 0.00010086096881423146, 0.00025178224314004183, 0.00016479215992148966, 0.000146955979289487, 0.00025734258815646172, 0.00017236522398889065, 9.5574163424316794e-05, 6.7814660724252462e-05, 0.00014649848162662238, 0.00020889140432700515, 0.0002875514910556376, 0.00020059059897903353, 0.00044060373329557478, 8.3517035818658769e-05, 0.00011840713705169037, 9.4262984930537641e-05, 0.00047662152792327106, 0.00030174761195667088, 0.00011495723447296768, 0.00033869186881929636, 3.3223343052668497e-05, 0.00016832293476909399, 0.00012154541036579758, 0.00051670888205990195, 0.0003797179670073092, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -48,-70,-11,127,22,70,76,-61,-8,-24,-17,-4,-26,-3,36,0,-10,-40,26,24,15,-127,123,11,-95,12,50,-33,-127,-127,41,21,10,44,61,-22,-30,-5,26,-3,-18,26,-107,71,21,-58,37,45,-18,46,-22,18,12,-7,21,55,-88,-52,-62,-23,-10,0,12,40,71,-29,73,21,-16,15,22,127,25,26,29,4,-11,20,127,4,-14,13,-24,20,127,19,-73,-17,-3,-38,-19,-47,4,-30,-18,32, 127,-127,72,102,-42,127,42,-122,73,1,-19,127,127,-94,-13,17,11,127,127,-107,127,-58,78,78,-127,-100,-76,-34,-51,45,-59,-21,-88,57,-127,-84,-43,-12,-50,65,1,127,127,85,-53,-107,-112,-49,-15,-127,42,81,89,-28,46,82,-50,42,-87,-115,-44,-36,-61,65,75,-58,27,35,-91,29,-16,93,112,127,12,26,2,64,-30,60,66,127,127,-24,-6,76,-116,127,-124,-99,6,-127,-88,-127,-39,112, -77,-15,30,-81,14,-28,52,-10,85,-38,-30,29,-17,2,-8,-11,-12,-12,8,0,-17,-111,32,6,-121,104,-3,-55,115,49,-15,2,7,19,11,-28,-6,37,19,26,29,14,-119,75,12,-14,35,14,-14,5,-16,3,-1,0,8,22,-69,8,-52,50,-2,46,36,-2,-9,-38,-32,26,-2,1,-1,51,17,-25,-5,20,-8,-4,-81,5,-19,-22,-13,0,-112,10,-42,-24,-54,26,-30,-37,30,-32,-14,11, 
  /* [0][1][][] */ -65,-73,71,-31,-47,83,24,127,-53,-23,-2,-114,23,-109,76,31,-1,-59,-18,90,49,-61,40,58,-113,-13,127,-26,-24,63,124,-111,-127,96,-83,-59,-38,38,-23,100,-50,-30,-4,50,-49,127,-22,62,15,89,20,1,18,-54,31,40,127,122,-63,-83,127,-33,-37,127,75,-40,-14,3,125,45,127,87,-41,102,-1,10,12,19,-30,17,-48,112,-73,111,1,29,-50,29,81,-127,-36,-8,127,-66,-23,5, 66,127,54,-111,127,76,86,37,-127,127,127,-36,-67,-122,-127,127,127,-61,-124,-48,101,98,-127,127,-111,-79,-54,127,-122,107,-127,-127,-88,127,110,127,127,-127,-100,127,-60,-97,110,-127,-127,-32,-127,-127,127,-110,81,46,127,127,127,-127,100,-127,-127,127,20,-78,-127,-101,-127,127,-127,127,-127,-127,-101,-83,-127,-83,127,127,-127,127,-73,127,127,25,-38,-127,61,127,90,45,127,19,127,1,-68,34,127,-127, -56,-15,-48,37,-56,-100,25,-29,17,-34,-30,92,2,102,14,12,-4,61,-6,125,6,-72,-42,14,-90,110,-87,-19,-69,-16,15,-68,-66,36,3,-19,-28,48,-58,55,127,-4,-42,39,-46,-53,14,41,8,109,-12,8,-33,-71,15,22,94,6,-12,21,-38,127,90,-57,-45,12,32,-14,-77,125,-15,-81,2,-56,-14,-13,26,23,77,-35,-71,-42,60,15,-47,-18,62,21,17,66,-48,20,-42,90,-26,2, 
  /* [0][2][][] */ -65,0,-4,-15,13,-49,78,24,55,-31,-37,-3,14,27,-25,7,-6,55,10,-3,-53,-86,2,-6,-29,-60,29,-72,83,38,28,18,16,4,-8,-53,-15,42,6,6,-18,-9,-66,113,5,36,9,36,-16,-34,8,-22,33,0,28,20,-69,26,-25,17,18,-1,-21,-11,0,-48,-37,19,-28,18,28,40,14,-16,29,2,23,9,-81,-13,-2,-15,20,15,-125,17,21,-44,-60,-53,-27,-61,11,53,-23,-1, 123,29,-127,-30,-72,-14,44,26,-61,-34,-20,-100,-78,127,-11,43,-1,-56,-5,-127,92,-42,-36,7,-110,127,-59,21,-36,-22,-7,-11,-74,24,31,7,-29,-28,127,55,12,-12,68,-17,-37,71,-70,-43,-33,-11,-127,-127,-42,-22,20,40,-73,-6,-15,39,-7,-17,9,-52,-54,32,61,-19,118,114,-22,-51,12,-56,1,1,97,11,47,18,19,-104,-43,3,7,14,127,41,-62,41,-19,-118,42,76,-13,34, -53,12,-18,30,14,-67,-127,0,-11,-13,-17,10,11,-21,20,-3,-9,-19,10,13,-50,-71,10,2,7,-82,14,5,-50,-40,-9,10,41,-18,-6,-23,-41,5,45,-30,23,0,-52,-15,3,68,21,15,-9,-6,4,-13,34,5,20,0,-60,-8,-11,-35,-12,12,85,-19,33,-3,-2,29,-3,6,-3,32,-13,16,-2,15,35,5,79,-14,9,-12,-3,-16,75,5,42,-39,55,41,-18,-61,-6,0,-17,-8, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0051225959323346615, 0.004018113948404789, 0.0042508551850914955, 0.010272002778947353, 0.010069381445646286, 0.0084961708635091782, 0.0027388546150177717, 0.0042545772157609463, 0.01201348565518856, 0.0072610420174896717, 0.0096011655405163765, 0.0058853081427514553, 0.010552722960710526, 0.010092861950397491, 0.014397227205336094, 0.0058040861040353775, 0.0086502199992537498, 0.0099498536437749863, 0.0097300317138433456, 0.0071466397494077682, 0.0034948682878166437, 0.0020222114399075508, 0.0075228717178106308, 0.0037816243711858988, 0.0031835581175982952, 0.0048270570114254951, 0.0072444947436451912, 0.0059704477898776531, 0.0031890526879578829, 0.018120799213647842, 0.016770739108324051, 0.0093595301732420921, 0.0059994361363351345, 0.0060130148194730282, 0.013539748266339302, 0.017046194523572922, 0.026193533092737198, 0.0060333684086799622, 0.014696605503559113, 0.00340093276463449, 0.0097621660679578781, 0.0087075764313340187, 0.017286641523241997, 0.0037066224031150341, 0.017362950369715691, 0.0050881127826869488, 0.0041478411294519901, 0.0092520145699381828, 0.030626419931650162, 0.0039755296893417835, 0.021314781159162521, 0.0085979374125599861, 0.005551495123654604, 0.0057657025754451752, 0.0059427223168313503, 0.0044801831245422363, 0.0052734874188899994, 0.01955701969563961, 0.0017168187769129872, 0.0088506173342466354, 0.013556953519582748, 0.011277087032794952, 0.004885371308773756, 0.0075016836635768414, 0.0066071720793843269, 0.006849395576864481, 0.014623508788645267, 0.015314933843910694, 0.0088731441646814346, 0.0071112192235887051, 0.0086735216900706291, 0.004286590963602066, 0.010700744576752186, 0.0070036663673818111, 0.0062456289306282997, 0.010937060229480267, 0.0073255216702818871, 0.0040619019418954849, 0.0028821229934692383, 0.0062261852435767651, 0.0088778845965862274, 0.012220938690006733, 0.0085251005366444588, 0.01872565783560276, 0.0035494738258421421, 0.0050323032774031162, 0.0040061767213046551, 0.020256415009498596, 0.012824272736907005, 0.0048856823705136776, 0.014394404366612434, 0.0014119921252131462, 0.0071537243202328682, 0.0051656798459589481, 0.021960128098726273, 0.016138013452291489, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1682, 5136, 11838, 43295, 13415, -4841, -2178, 6458, 30484, -3427, 16829, 4070, 8171, 19479, 32624, 2551, 3513, 9155, 15622, 7600, -379, 784, 11643, -1176, 5087, -129, 11685, 6524, 6400, 50741, 68139, 27088, 7265, -806, 14133, 2091, 3527, 4386, 26936, -628, 14215, 10853, 52142, -3922, 32544, 8955, 8706, 15561, 58710, 9006, -720, 6104, -2670, -500, -1830, 7207, 49, 22080, 6853, 10895, 6785, 12855, 5889, 5363, 15820, 9891, 5389, -7118, 7623, -4984, 6957, 12423, 18869, 8445, -3757, -4697, 6221, 519, 1981, -1406, 18052, 12632, 3662, 18236, 2636, 772, 11220, 139262, 10068, 8268, 5207, -25, 7366, 9999, 6348, 24311, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00023580979905091226, 0.00027534636319614947, 0.00016031642735470086, 5.4242660553427413e-05, 0.00022268043539952487, 0.0002203580952482298, 0.0004022556240670383, 0.00024975035921670496, 7.6900731073692441e-05, 0.00038239429704844952, 0.00016130808216985315, 0.00023001366935204715, 0.00015667847765143961, 0.00012061286543030292, 7.2646515036467463e-05, 0.00024131177633535117, 0.00014246288628783077, 0.00014775042654946446, 0.00014476363139692694, 0.00017777542234398425, 0.00025178078794851899, 0.00043101454502902925, 0.00016346678603440523, 0.00058131618425250053, 0.00052567623788490891, 0.00028212947654537857, 0.00019105957471765578, 0.00020680502348113805, 0.00024768701405264437, 7.0087538915686309e-05, 4.2420833779033273e-05, 9.0953180915676057e-05, 0.00022402936883736402, 0.00021223946532700211, 0.00014566155732609332, 0.00027712891460396349, 0.0001505269028712064, 0.00030495302053168416, 9.860505087999627e-05, 0.00090719485888257623, 0.00012033493112539873, 0.00014792340516578406, 5.2204595704097301e-05, 0.00025182683020830154, 0.00010030849080067128, 0.00016250323096755892, 0.00019079168851021677, 0.00017305600340478122, 7.0984933699946851e-05, 0.00023610082280356437, 0.00018899925635196269, 0.00026383859221823514, 0.00036993881803937256, 0.00023467428400181234, 0.00056593434419482946, 0.00015467956836801022, 0.00011400234507163987, 8.8083186710719019e-05, 0.00029203793383203447, 0.00013513190788216889, 0.00022377155255526304, 9.5652401796542108e-05, 0.0002584967587608844, 0.00018914080283138901, 0.00015596476441714913, 0.00019519546185620129, 0.00022857250587549061, 0.00018017482943832874, 0.00023757600865792483, 0.00014975159137975425, 0.00015808330499567091, 0.00013057670730631799, 0.00010834734712261707, 0.00013493954611476511, 0.00041198209510184824, 0.00027936862898059189, 0.00026988273020833731, 0.00022429772070609033, 0.00037728229654021561, 0.00026160117704421282, 0.00011236560385441408, 0.00012694447650574148, 0.00020655182015616447, 0.00011146558972541243, 0.00043621865916065872, 0.000204895855858922, 0.00020593036606442183, 2.8101934731239453e-05, 0.00013903800572734326, 0.00027087450143881142, 0.00024240557104349136, 0.00039628133527003229, 0.00020013870380353183, 0.00017026210844051093, 0.00017938374367076904, 7.0349618908949196e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -13,39,-52,50,-1,-37,51,7,27,50,-51,82,0,-127,31,-74, 
  /* [1][0][][] */ 4,56,26,-16,5,-11,127,-73,-31,53,-15,-63,12,-33,19,-10, 
  /* [2][0][][] */ -66,71,-45,-46,-42,5,21,127,-17,58,80,8,13,-10,81,-22, 
  /* [3][0][][] */ -93,69,69,47,-89,84,89,112,9,57,-115,51,55,-34,-127,-16, 
  /* [4][0][][] */ 3,-39,35,66,-30,34,4,1,10,-1,14,-7,-21,16,-127,-16, 
  /* [5][0][][] */ -18,-14,61,-2,40,-35,-16,21,-77,31,-2,-127,-12,18,-98,-28, 
  /* [6][0][][] */ -8,-3,14,-13,60,28,-93,-71,1,-16,47,40,127,-27,-14,-48, 
  /* [7][0][][] */ 16,9,127,-18,-57,-60,-65,-47,-127,11,-56,-64,34,-44,-6,25, 
  /* [8][0][][] */ -55,46,93,-48,-114,37,48,25,42,16,109,-127,-97,41,-110,-73, 
  /* [9][0][][] */ 31,-34,72,59,30,41,-55,-9,22,-34,-11,2,9,21,-127,-67, 
  /* [10][0][][] */ -19,-84,32,-25,-75,0,-29,79,109,127,71,-28,-2,103,72,-14, 
  /* [11][0][][] */ 15,4,-17,-87,21,-92,-36,-127,-22,64,-40,-35,32,-20,74,-89, 
  /* [12][0][][] */ 29,32,16,-7,-20,-16,-50,55,-49,-25,-34,-11,45,122,127,47, 
  /* [13][0][][] */ -35,-127,-121,8,-57,-60,53,1,34,35,28,7,-11,53,111,99, 
  /* [14][0][][] */ -21,-65,64,0,58,37,3,127,21,37,13,-38,41,18,-57,99, 
  /* [15][0][][] */ 41,-16,-30,57,30,-16,88,-18,-8,-127,0,-34,1,-43,-2,-54, 
  /* [16][0][][] */ 30,-39,-52,-22,14,24,13,-89,120,83,86,68,9,72,75,127, 
  /* [17][0][][] */ -32,-26,112,49,96,127,-13,1,-6,-100,61,-9,-4,2,-89,-26, 
  /* [18][0][][] */ -20,46,-13,36,-96,-12,14,44,-17,8,-78,-12,12,-127,29,-53, 
  /* [19][0][][] */ 48,-37,31,1,127,7,-83,-44,-8,-85,38,-50,-60,16,30,21, 
  /* [20][0][][] */ 64,23,86,-55,-6,11,-19,53,-62,-60,127,5,20,-13,-72,116, 
  /* [21][0][][] */ 13,-72,3,-26,27,-19,-53,-53,-20,38,84,11,-127,13,30,22, 
  /* [22][0][][] */ 21,4,75,-74,-18,-69,21,-21,-127,13,-48,-77,-53,-5,51,-44, 
  /* [23][0][][] */ 34,2,29,2,-2,13,-22,2,-21,-14,55,-1,127,10,26,-33, 
  /* [24][0][][] */ -23,0,-2,-36,-56,8,96,49,-98,-2,-46,-116,47,-127,77,6, 
  /* [25][0][][] */ -127,115,4,-49,29,-18,-58,-56,9,44,36,-82,-53,-40,-6,-66, 
  /* [26][0][][] */ 19,-78,60,-71,76,-72,25,13,36,-31,106,-62,-68,52,-6,127, 
  /* [27][0][][] */ 63,-42,43,-31,-65,-38,2,-22,-23,13,-127,-2,-2,-20,-7,34, 
  /* [28][0][][] */ -127,-70,-120,-70,75,-44,55,-54,9,47,-52,18,33,11,4,81, 
  /* [29][0][][] */ -27,-17,12,127,-38,3,-8,-29,0,14,-94,30,41,-50,-10,-47, 
  /* [30][0][][] */ 86,-3,127,-42,48,62,-33,78,-61,-95,60,-26,37,-28,-94,97, 
  /* [31][0][][] */ 17,-110,-24,-51,-19,-91,43,-25,26,73,104,33,-21,126,126,127, 
  /* [32][0][][] */ -31,59,-18,7,-127,47,-58,-35,-27,-17,13,86,-1,36,31,56, 
  /* [33][0][][] */ 75,-5,1,127,-2,-72,11,-31,-122,49,54,-27,17,-22,-48,77, 
  /* [34][0][][] */ -11,7,-18,-61,43,-49,-127,-50,-13,64,-4,26,-29,18,10,21, 
  /* [35][0][][] */ 57,47,-13,-22,-9,-127,-79,3,3,-49,-75,-22,98,6,8,-4, 
  /* [36][0][][] */ 35,0,-127,11,86,-14,-56,29,-39,-49,37,-47,-6,-4,1,5, 
  /* [37][0][][] */ -15,-24,127,-42,-100,5,28,-56,-25,41,29,41,0,-44,26,49, 
  /* [38][0][][] */ -127,-10,22,79,6,82,-73,-79,5,-101,106,6,-41,-3,43,-94, 
  /* [39][0][][] */ -10,-4,6,29,22,-11,-127,52,4,28,2,-11,16,-13,0,9, 
  /* [40][0][][] */ 16,127,-75,80,-48,96,124,100,-5,-39,-108,123,65,-26,-104,-38, 
  /* [41][0][][] */ 42,1,-81,-30,-67,-1,81,72,-15,84,-51,14,-15,45,127,-33, 
  /* [42][0][][] */ 24,48,-34,-13,43,-36,-37,51,-31,-70,23,-20,-38,-30,-127,-22, 
  /* [43][0][][] */ -7,-15,8,-78,-10,-8,-79,-127,-28,6,-23,-48,-100,-32,20,-13, 
  /* [44][0][][] */ 26,26,-20,-11,-20,-12,5,-31,127,-7,8,67,19,67,5,57, 
  /* [45][0][][] */ -96,-31,6,-102,76,5,-11,57,55,-61,-15,2,-1,127,-9,118, 
  /* [46][0][][] */ -59,31,-39,103,-127,-15,45,-79,-123,63,-90,-50,22,-2,-19,-3, 
  /* [47][0][][] */ -39,-33,-74,127,-18,60,11,-18,19,28,104,65,-61,-34,15,1, 
  /* [48][0][][] */ -26,-6,-8,-127,2,-29,6,-3,-39,45,61,-27,2,6,90,37, 
  /* [49][0][][] */ -49,39,6,84,-20,17,-21,54,11,22,-58,2,0,-53,-127,-48, 
  /* [50][0][][] */ 5,37,56,-118,72,22,-14,27,127,38,30,40,-13,-45,27,-2, 
  /* [51][0][][] */ -4,-58,56,-10,27,-12,-31,-127,21,-46,16,-19,-7,-2,-34,23, 
  /* [52][0][][] */ 30,18,28,11,45,8,-69,127,-115,102,-30,-22,73,75,-24,-31, 
  /* [53][0][][] */ -30,72,12,-89,-73,-7,65,14,-18,-30,-91,116,7,-127,-64,-19, 
  /* [54][0][][] */ -12,15,22,3,60,-31,-13,-44,0,5,-8,-3,-15,127,-56,-20, 
  /* [55][0][][] */ -84,127,81,-25,62,26,-38,34,-52,13,109,-40,24,-3,78,4, 
  /* [56][0][][] */ 58,105,27,-121,57,60,-127,27,-35,-110,14,98,-52,-73,90,-32, 
  /* [57][0][][] */ -37,-5,22,36,-2,34,37,127,-35,-36,-5,-103,40,101,-8,52, 
  /* [58][0][][] */ 48,124,-23,-107,39,14,-29,26,68,3,14,127,-5,-88,62,72, 
  /* [59][0][][] */ 101,55,118,-127,-71,-21,16,29,43,2,-2,-86,3,-90,-110,-23, 
  /* [60][0][][] */ 63,41,112,-71,-58,88,-2,-2,-14,47,-127,-37,89,-19,23,-37, 
  /* [61][0][][] */ -23,-42,-30,11,-96,24,127,101,-49,68,73,52,-30,126,-2,82, 
  /* [62][0][][] */ 29,-28,-7,14,-51,50,-17,10,-37,-26,-34,30,40,-108,127,66, 
  /* [63][0][][] */ 28,-70,65,-91,67,18,-123,-127,-41,49,-44,-15,67,47,-9,-7, 
  /* [64][0][][] */ 15,41,8,53,70,32,-57,-127,15,-123,-19,-41,-15,-65,20,-26, 
  /* [65][0][][] */ -127,25,49,-113,7,49,48,-71,-105,27,56,-33,18,54,-42,-20, 
  /* [66][0][][] */ 22,-11,127,18,-66,33,-6,47,-50,13,10,-106,-12,46,-107,-5, 
  /* [67][0][][] */ 100,38,-46,98,-21,-75,-89,-85,-2,-112,-122,-27,-109,-35,-125,127, 
  /* [68][0][][] */ 47,-15,-53,29,-36,-44,-24,-40,-16,-14,21,-14,-23,51,127,-20, 
  /* [69][0][][] */ -72,2,-127,108,-56,-125,91,85,27,64,43,52,83,6,14,-25, 
  /* [70][0][][] */ 3,7,-42,-11,-103,11,127,103,-19,61,-44,44,-1,26,-13,23, 
  /* [71][0][][] */ 54,-30,-87,1,93,2,-17,97,-11,-45,-34,62,49,-127,83,-32, 
  /* [72][0][][] */ 70,47,-32,45,44,-20,-86,-43,60,56,-127,48,79,40,32,-27, 
  /* [73][0][][] */ -82,-127,4,-26,-104,-72,38,-54,-8,7,-58,-5,12,-70,106,-36, 
  /* [74][0][][] */ -29,15,57,106,-26,-17,-127,80,49,-31,-40,-42,-8,-9,8,11, 
  /* [75][0][][] */ -102,91,-60,47,-28,115,107,121,0,43,8,-28,-127,63,-3,22, 
  /* [76][0][][] */ -2,-30,7,1,34,-51,-127,-97,-24,-49,-36,-21,7,23,21,-83, 
  /* [77][0][][] */ 1,24,-52,-60,-77,-72,-43,-78,127,21,-119,-47,7,23,43,-76, 
  /* [78][0][][] */ -80,-127,4,42,103,35,-70,-6,-14,-63,-66,63,67,-15,72,43, 
  /* [79][0][][] */ 67,-20,73,-95,127,-42,48,-6,104,45,31,54,-73,-42,7,-44, 
  /* [80][0][][] */ 43,7,61,-71,28,-40,19,49,-61,-127,-72,-32,18,73,-62,-23, 
  /* [81][0][][] */ 32,13,42,54,8,36,-82,-25,0,-33,4,-63,-20,16,-127,29, 
  /* [82][0][][] */ -67,0,-55,-75,-39,-59,56,-10,-54,17,-12,-52,-2,-127,-66,49, 
  /* [83][0][][] */ -26,27,-56,-127,-10,2,5,65,-82,-9,60,-69,11,-71,21,-4, 
  /* [84][0][][] */ 127,13,40,38,-41,-11,-45,-8,10,-3,52,7,-38,12,16,-29, 
  /* [85][0][][] */ 9,-17,-4,-28,31,-56,-18,122,-100,-97,-89,-58,15,81,42,-127, 
  /* [86][0][][] */ -9,-29,21,-8,-69,28,-9,31,-82,-64,12,-61,-27,-81,-127,26, 
  /* [87][0][][] */ 120,-32,-28,-2,-93,-68,9,-15,-23,38,-127,-9,25,-66,-9,64, 
  /* [88][0][][] */ 48,85,-18,44,17,-24,-97,18,78,-4,24,0,-3,15,127,-116, 
  /* [89][0][][] */ -3,15,-74,-37,0,-21,9,-55,50,52,-9,-50,-8,-5,-4,-127, 
  /* [90][0][][] */ -23,-25,21,-34,-36,-5,56,-85,26,-38,18,-127,22,-15,-40,-43, 
  /* [91][0][][] */ 4,8,11,-52,-79,0,34,-100,-93,24,50,11,-49,-54,23,127, 
  /* [92][0][][] */ -2,-19,-8,-10,63,-22,-88,-127,60,-27,4,-10,-55,2,15,-6, 
  /* [93][0][][] */ 35,19,62,-72,17,-2,2,24,0,-64,127,4,-14,53,-14,45, 
  /* [94][0][][] */ -5,62,-60,22,46,-127,-26,0,-21,-67,65,15,-23,-24,-26,1, 
  /* [95][0][][] */ -27,127,-1,-125,-17,-72,15,-10,1,-36,-114,-118,-40,-21,-117,-99, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00082735053729265928, 0.00096606655279174447, 0.00056247826432809234, 0.00019031310512218624, 0.0007812855183146894, 0.0007731374935247004, 0.0014113341458141804, 0.00087626173626631498, 0.0002698100870475173, 0.0013416496803984046, 0.00056595751084387302, 0.00080701452679932117, 0.00054971431382000446, 0.00042317630141042173, 0.00025488395476713777, 0.00084665452595800161, 0.00049983820645138621, 0.00051838980289176106, 0.00050791050307452679, 0.00062373402761295438, 0.00088338559726253152, 0.0015122361946851015, 0.00057353143347427249, 0.0020395771134644747, 0.0018443615408614278, 0.0009898655116558075, 0.00067034212406724691, 0.00072558585088700056, 0.00086902233306318521, 0.00024590565590187907, 0.00014883563562761992, 0.00031911380938254297, 0.00078601832501590252, 0.00074465287616476417, 0.0005110609345138073, 0.0009723207913339138, 0.00052813120419159532, 0.0010699430713430047, 0.00034596078330650926, 0.0031829387880861759, 0.00042220117757096887, 0.00051899673417210579, 0.00018316245405003428, 0.00088354712352156639, 0.00035193740040995181, 0.00057015079073607922, 0.00066940224496647716, 0.0006071756943129003, 0.00024905422469601035, 0.00082837161608040333, 0.00066311343107372522, 0.00092569104162976146, 0.0012979489983990788, 0.00082336657214909792, 0.0019856090657413006, 0.00054270104737952352, 0.00039998296415433288, 0.0003090442914981395, 0.0010246298043057323, 0.00047411708510480821, 0.00078511377796530724, 0.00033560127485543489, 0.00090694893151521683, 0.00066361005883663893, 0.0005472102202475071, 0.0006848531193099916, 0.00080195814371109009, 0.00063215248519554734, 0.00083354738308116794, 0.00052541098557412624, 0.00055464322213083506, 0.00045813494944013655, 0.00038014212623238564, 0.00047344219638034701, 0.0014454599004238844, 0.00098017894197255373, 0.00094689714023843408, 0.00078695983393117785, 0.0013237139210104942, 0.00091784086544066668, 0.00039424037095159292, 0.00044539110967889428, 0.00072469748556613922, 0.00039108263445086777, 0.0015304951230064034, 0.00071888742968440056, 0.00072251708479598165, 9.8597054602578282e-05, 0.00048782184603624046, 0.00095037685241550207, 0.00085049215704202652, 0.0013903729850426316, 0.00070219673216342926, 0.00059737317496910691, 0.00062937691109254956, 0.00024682519142515957, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 3563, -3427, 270, 25432, 34445, 4041, -17167, -5253, 35968, 14880, 23794, 16696, 1967, 15947, 26684, -29152, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00034438507282175124, 0.00031141185900196433, 0.00025668132002465427, 0.00021891620417591184, 0.00032361061312258244, 0.00029944538255222142, 0.00023800067720003426, 0.00041400743066333234, 0.00019634456839412451, 0.00021559762535616755, 0.0003587261016946286, 0.00071160448715090752, 0.0003651898296084255, 0.00036288771661929786, 0.00041705599869601429, 0.00027939453138969839, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -10,6,-6,30,72,88,-53,-54,38,4,-20,39,-23,6,29,73,34,-5,-21,-22,92,-61,-3,-34,-32,-40,-26,-116,7,-5,76,16,124,-19,6,7,-4,12,-20,13,-26,18,30,-3,15,-26,-8,27,-1,25,16,-8,-29,-14,-2,-25,49,43,-53,-48,-70,44,-11,-33,-2,-6,66,-17,20,-6,-55,-61,-77,10,9,-5,-20,-117,-4,-13,62,-19,-63,-58,2,-21,-22,12,-3,-24,31,-70,65,31,-4,127, 
  /* [1][0][][] */ 55,-99,24,69,-34,-45,-23,-55,-9,-78,10,21,-6,-67,-28,-43,-87,18,36,29,-24,-112,-29,13,118,-34,-63,55,-22,118,-5,16,-17,-10,-48,-8,-19,-4,86,-36,-25,-54,60,-39,-61,6,73,-3,18,-15,-18,-7,68,-82,6,-34,14,19,-12,-127,18,-61,39,-88,-1,-74,53,74,18,54,-36,-6,-92,16,5,120,36,68,17,-33,49,-3,-60,35,-102,97,-19,26,-38,41,23,19,-16,-26,9,1, 
  /* [2][0][][] */ -1,-1,-32,-27,27,3,-13,35,52,20,1,37,-8,26,76,12,-20,-22,25,-29,-30,-74,2,-56,-5,-1,-15,3,-6,23,73,-46,21,-36,-16,47,-7,127,-41,-40,-40,-44,-13,43,-34,-35,-73,-15,24,52,-17,-32,44,16,9,-50,-26,2,-20,20,18,28,50,97,36,-72,-5,-65,1,-21,-39,22,4,-10,-34,4,15,52,31,42,-21,100,14,-35,-3,-36,-16,-18,37,-21,-16,-67,-46,-20,-1,39, 
  /* [3][0][][] */ -21,6,-26,50,45,-29,-7,-7,-3,38,-31,20,-20,-11,58,1,38,-36,-3,25,12,-36,-9,-1,17,16,-4,33,14,-19,58,-27,-9,-20,-20,45,-16,-55,-2,37,10,-82,9,-8,-8,18,-8,26,-127,20,16,25,-124,-5,-13,-43,11,-5,-9,18,-36,8,-15,7,-34,-68,-37,16,39,51,-7,10,-50,17,-31,-13,-43,-72,11,-1,14,6,37,72,-9,36,35,-2,3,-33,1,-22,-35,11,3,-14, 
  /* [4][0][][] */ 8,-35,24,-82,-24,25,-60,20,-25,-87,-5,-18,-8,44,33,30,98,-58,-1,-24,3,19,52,10,-55,29,-7,41,15,-5,21,-12,-43,-15,-47,21,34,-47,-10,-9,7,36,-101,-31,8,-28,20,-17,17,74,12,10,-47,4,-7,-36,14,4,23,23,-27,24,16,-69,20,-109,-15,-41,-60,4,-71,-6,-19,29,-31,36,-17,50,35,16,3,-7,127,-41,13,-14,11,-18,67,36,-11,20,-9,45,-8,-32, 
  /* [5][0][][] */ -30,-19,-10,1,-16,-11,5,110,68,-2,-21,-20,-43,16,78,18,-16,10,4,-26,-20,-34,7,-46,33,13,6,68,60,22,46,57,-35,-27,-1,-13,-39,-65,-22,6,-34,-46,-16,-13,42,22,-8,37,-18,13,-21,19,-48,-5,5,-40,-27,-38,27,10,-64,24,-30,-41,-10,27,-24,2,7,42,10,14,24,-2,11,41,10,9,-5,127,-3,-27,32,26,16,-19,42,-23,-38,-20,17,-119,-56,-20,-10,-103, 
  /* [6][0][][] */ -31,29,-1,-58,9,-51,20,9,-5,41,7,9,20,-61,17,-9,-2,-38,28,26,6,14,-27,12,112,-18,-2,-40,20,-22,-18,7,7,8,-26,-17,50,45,8,38,7,-84,-9,-20,-10,5,19,-127,-18,65,-18,16,20,-11,10,-58,45,-21,-3,23,38,24,-2,74,7,103,46,-23,-23,-8,80,-37,24,-2,54,-12,-28,58,-2,6,-25,20,57,-16,19,56,41,5,3,10,-25,-3,-44,-6,7,25, 
  /* [7][0][][] */ 14,10,29,-19,-15,-5,-10,-32,3,-18,-2,7,-42,-82,43,4,22,-3,-13,-3,8,-16,-23,-13,-17,-11,0,-14,-4,10,3,-21,-21,-31,10,-12,8,-7,-23,22,19,-1,7,45,-12,23,-4,55,-4,28,-25,1,-40,1,-9,-72,16,2,-1,-19,-8,18,-1,-10,-32,59,26,-21,-10,-5,21,19,-28,-15,4,21,31,4,-10,-8,17,-21,36,16,-37,127,7,13,-32,-27,16,12,-25,14,1,13, 
  /* [8][0][][] */ -61,25,-43,-15,34,-4,-13,44,27,84,-75,33,23,23,81,-37,58,39,-79,52,22,58,-25,-27,-64,-16,27,7,54,-81,16,37,47,-31,18,18,-14,6,-69,24,47,46,-1,-127,-59,7,76,-8,-59,56,-34,80,-98,82,3,-43,5,1,-8,0,-38,3,9,20,-64,46,34,-69,0,23,11,64,-56,30,6,26,-28,-79,-50,-31,60,-31,45,12,-76,-9,22,-49,24,43,-34,-32,88,-29,-22,-48, 
  /* [9][0][][] */ 6,-35,-33,-27,0,43,13,27,28,-41,27,-5,-48,-18,-23,37,-10,19,41,-1,-36,55,-48,-32,48,2,33,-65,-59,-62,-46,-1,-13,55,3,14,-1,70,-66,30,42,13,-17,-127,28,-16,34,-122,-26,-14,-3,5,2,16,-19,-40,-47,52,-25,16,-23,26,23,68,-11,121,51,28,-18,-34,14,-6,-56,-30,-30,-50,59,11,27,-27,-25,14,8,-19,60,49,-3,24,-18,65,-31,10,-16,4,30,-35, 
  /* [10][0][][] */ 27,59,-29,8,54,-93,3,-3,2,36,37,-8,-20,-1,21,-58,12,8,6,42,-74,-11,11,-15,-62,-5,-43,31,-7,-9,1,68,6,2,19,-1,80,-34,-23,-32,-19,56,31,-36,-34,-25,-21,1,-25,1,-18,-15,-7,3,8,-25,0,5,-20,16,-12,22,-8,11,-2,25,47,20,57,-7,12,38,-24,-17,-53,-19,2,22,-11,9,51,0,-56,-25,75,-62,95,14,15,31,5,-3,67,37,-5,-127, 
  /* [11][0][][] */ 47,53,-17,21,19,-3,55,5,3,-16,-37,-5,7,4,25,-6,-5,3,-92,0,12,9,11,-8,-45,-30,-4,5,2,33,-14,20,15,-9,9,18,3,-6,-15,38,34,-1,52,-92,11,-13,-9,20,-127,12,-4,-49,16,38,-12,18,-17,-42,2,1,15,-27,-25,25,-54,68,-15,9,17,7,57,10,-40,-35,0,22,-4,-38,-44,23,-2,8,79,30,-4,-19,7,-15,-11,10,-27,-6,3,14,-2,15, 
  /* [12][0][][] */ -43,-34,22,8,-65,44,-16,-19,127,13,-20,12,-4,-6,-22,-43,60,36,17,84,55,11,-29,-22,-9,19,-5,-3,-86,29,48,-60,-10,-43,-14,-12,31,-46,36,1,-56,-2,-2,14,-39,40,31,3,15,13,-73,21,-34,-14,-11,-11,85,-26,20,-18,-27,-9,-1,-48,-14,47,-71,9,-55,18,-10,-51,-26,9,-73,29,30,-22,-55,-53,3,-10,50,51,-73,5,-21,-23,-25,17,-1,27,-45,-24,14,21, 
  /* [13][0][][] */ 23,-10,-21,32,33,6,-8,26,-4,1,21,10,22,-6,1,21,31,-90,-43,5,-18,-28,44,5,-3,15,-7,-11,-15,-56,-9,25,12,23,21,29,15,-3,-33,9,8,18,22,58,20,14,-2,-127,43,16,-6,-31,-3,13,6,-17,2,11,13,44,-19,39,-16,12,1,-12,-31,-97,37,0,-18,-29,-9,29,-33,4,-31,-10,19,-14,33,-14,-23,35,34,33,16,24,21,-13,10,-30,-4,37,-7,-24, 
  /* [14][0][][] */ -121,-29,56,48,37,-8,-22,31,1,-11,-22,4,78,-31,-127,-24,85,-22,-13,68,15,-15,36,-8,-116,5,42,-33,-40,-31,-14,20,-5,19,28,-75,31,21,-22,50,20,53,-10,-41,19,127,72,87,-118,48,-23,13,-61,-5,31,-9,21,13,57,44,26,47,15,48,-55,-31,-45,60,10,58,-36,-104,-63,26,18,72,-11,42,67,-4,63,-12,41,20,37,61,58,40,18,95,52,9,15,19,14,-20, 
  /* [15][0][][] */ 79,9,50,-5,29,49,24,-28,-30,51,33,37,-86,-17,3,34,53,37,36,-13,-1,24,-67,64,6,-22,63,-21,28,27,-87,-79,38,-55,60,2,55,-35,-69,-85,25,9,31,57,19,80,10,-9,97,-2,-25,1,45,-97,66,-127,17,-53,12,55,-100,16,11,70,47,5,-44,12,-35,63,-17,11,29,6,9,-20,23,-52,66,-20,2,2,14,124,-18,-12,26,-33,-18,-32,66,-12,-25,88,48,-25, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.01463636476546526, 0.013235003687441349, 0.010908955708146095, 0.0093039385974407196, 0.013753451406955719, 0.012726428918540478, 0.010115028358995914, 0.017595315352082253, 0.0083446437492966652, 0.0091628991067409515, 0.015245859511196613, 0.030243190005421638, 0.015520568005740643, 0.015422727912664413, 0.017724879086017609, 0.01187426783144474, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11100, -9652, 3860, 60797, -1573, -2795, -13267, 576, -3279, -604, 315, -531, 1914, -7353, 5993, -6608, 32, 15283, 27527, 1979, 4962, -1759, 597, 1049, 15286, -1347, -1946, -3845, -6312, -9532, 3343, -8731, -628, -288, 844, 26314, 3531, -2659, 17776, 476, -796, 2501, -10747, -7672, -6960, 60665, 1386, 21395, 32965, -15616, 239, 12051, 7152, -2013, -4657, 1962, -14437, 1567, 2106, -7104, -2353, 760, -13676, -1767, 1668, 9515, 27387, 13751, -11497, -907, -15646, -1296, 47890, 7308, 21, -132, 18409, 36239, -613, -10930, -1751, -4305, 125, -3159, 457, 2138, 936, -96, 3765, -1230, 468, 886, 360, 2147, 827, 49270, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00015824587899260223, 0.00010808811930473894, 0.00018901514704339206, 3.4909637179225683e-05, 0.00014861900126561522, 0.00018374774663243443, 0.0002642660983838141, 8.6771033238619566e-05, 0.00013571823365055025, 0.00032152418862096965, 0.00021772562467958778, 0.00035974977072328329, 0.00011306090891594067, 0.00037907631485722959, 0.00016073706501629204, 0.00012151923147030175, 9.2091599071864039e-05, 0.0002719341719057411, 5.6772216339595616e-05, 0.00022659142268821597, 4.1890198190230876e-05, 0.00017271425167564303, 0.00013513825251720846, 0.00036651187110692263, 0.00025099361664615571, 0.00021140192984603345, 0.00013442682393360883, 0.00017933103663381189, 8.3387312770355493e-05, 0.00010068583651445806, 0.00016429051174782217, 0.00015110165986698121, 0.00011680625902954489, 0.00015858862025197595, 0.00018774977070279419, 8.9905508502852172e-05, 0.000394415546907112, 0.00015351237379945815, 5.007601430406794e-05, 0.00019968680862803012, 0.00021667373948730528, 0.00041393801802769303, 0.00036127236671745777, 0.000172360276337713, 0.00019517527834977955, 5.5583357607247308e-05, 0.00021777708025183529, 0.0001619155373191461, 8.0216406786348671e-05, 0.00015021859144326299, 0.00021126025239937007, 0.00010077824117615819, 0.00025181405362673104, 0.00027223560027778149, 0.00025010539684444666, 0.00063629983924329281, 0.00023978929675649852, 0.00024941196897998452, 0.00010367222421336919, 8.0845515185501426e-05, 0.00034050759859383106, 0.00012444744061212987, 0.00027329014847055078, 0.00010708182526286691, 0.00020745806978084147, 0.00036130612716078758, 0.00010208975436398759, 0.00011724116484401748, 0.00037177899503149092, 0.00019208293815609068, 0.00015682433149777353, 8.1949590821750462e-05, 0.00012283043179195374, 0.00013189886522013694, 0.00015993202396202832, 0.00023656373377889395, 0.00044993794290348887, 4.9104306526714936e-05, 0.00022107029508333653, 0.00018037499103229493, 0.00018714628822635859, 0.00048914633225649595, 0.00015405999147333205, 0.00016499971388839185, 0.00012791447807103395, 0.00010776430281111971, 0.00011974847438978031, 0.00020167751063127071, 0.00022126427211333066, 0.0001527302956674248, 0.00017622338782530278, 0.00011170871584909037, 0.00014301182818599045, 0.00039301143260672688, 0.0015486109768971801, 7.8578268585260957e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,5,-21,110,-18,19,-64,-53,18,-2,107,-11,1,-10,-8,58,5,18,-35,3,77,-2,35,-37,0,15,38,49,25,15,27,51,-4,26,3,-14,5,51,-79,-31,22,9,27,13,-86,-53,27,-8,-6,-16,-10,-11,50,7,-9,4,-4,-35,24,-28,34,-2,127,30,-12,-11,6,-47,70,38,8,-1,72,-31,68,9,16,-126,34,72,4,21,127,-17,41,30,-31,-18,31,-9,-16,77,1,16,-6,11, -47,8,-10,11,52,-12,-12,-127,36,18,-127,-5,-15,-12,0,96,15,-29,-14,-17,82,-98,127,24,-59,-31,-101,-16,29,42,-48,19,123,13,-10,2,-24,127,-67,-127,10,-19,-27,12,45,-127,127,-45,-73,57,48,5,36,-61,29,57,35,45,-99,81,127,35,8,-19,43,-37,-101,-13,38,-28,-9,46,-52,-44,107,-1,-29,-62,-32,79,-63,62,-12,4,-10,47,57,-41,-34,50,-13,71,-127,-34,22,-127, -1,-7,-25,-84,9,18,36,22,-1,2,13,60,2,-10,-17,9,-22,19,-26,20,18,22,22,-34,-1,-36,10,11,-6,12,49,-78,41,21,11,-22,10,11,-48,-27,11,4,-16,1,22,-29,22,-2,11,1,3,-9,5,11,-6,10,-9,47,9,-9,16,-17,2,-16,-29,-20,19,-46,-113,-3,56,-19,-127,-19,-9,22,8,-11,10,23,-15,29,-38,-9,-41,24,28,37,-27,-19,23,-9,17,4,-4,-49, 
  /* [0][1][][] */ -38,66,-17,37,-87,-17,-10,-43,28,98,-42,-24,-31,-26,-9,62,127,-24,-82,-8,55,-127,-26,13,-35,-49,-127,-8,41,36,-50,30,-127,-77,-64,3,62,-6,-52,43,-16,84,2,-1,32,-37,-14,-34,127,50,-7,17,43,11,-34,-17,33,7,-120,127,-35,-88,20,127,-53,-35,-79,127,-38,127,-16,57,-30,-58,33,12,-34,-68,127,49,127,34,10,-3,127,25,-95,47,-37,-37,-105,35,92,96,24,-57, 127,127,127,127,-45,-127,127,24,127,-127,24,-127,-105,127,127,127,-15,-127,-66,-127,127,23,-66,127,127,127,-52,-127,127,127,-127,127,-12,-127,-127,127,-127,-50,113,105,-127,-127,127,127,127,-107,-111,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-37,42,-113,-29,-67,-65,127,127,-53,115,127,-101,-124,127,-40,127,-127,-127,-127,127,-79,127,-37,127,93,127,-37,-127,-24,-109,-127,-127,-23,-127,-19,-127,-127,122, -24,73,-38,7,127,70,-22,47,5,25,-5,-7,-24,-29,-14,-7,-110,-23,-127,42,32,76,-11,-117,-36,-43,120,67,13,42,74,7,125,-43,125,-3,49,6,-93,10,39,24,-23,2,-25,-40,-12,-43,80,21,-13,34,-5,3,-76,-13,26,20,127,-91,4,127,-1,-35,-105,-29,-65,98,12,-14,127,25,-15,-59,11,50,-30,-5,-45,4,-46,9,54,22,-91,31,127,-44,26,-23,127,-7,-108,32,31,20, 
  /* [0][2][][] */ -4,-44,-21,-69,-8,12,45,36,-1,12,-19,48,24,-34,-12,9,44,2,12,26,-12,29,-22,-27,0,-26,8,10,-9,-3,50,-73,-37,64,-33,-25,30,-33,-82,18,15,11,-33,19,11,-69,-18,-3,-8,13,14,-9,8,2,-22,9,-3,46,-55,33,0,-17,6,22,-6,-12,6,-45,-57,13,-23,-8,-120,-39,-2,22,15,-14,58,21,19,24,-42,11,15,28,-22,5,8,27,24,-6,17,39,-5,-30, -26,-15,-27,29,-43,74,-20,69,2,-1,56,-14,127,-8,-19,-5,0,-39,-67,26,-26,78,-51,-113,-45,-47,102,75,13,54,54,-2,-122,60,-17,-22,-30,-28,-127,2,48,-12,-11,33,-26,-41,-21,-48,-60,31,67,25,-10,-80,27,55,15,28,71,-52,24,-58,-6,2,17,-25,-127,-56,-9,-24,-59,24,33,-48,-28,-6,-43,19,-56,7,49,37,14,10,6,61,-94,127,13,123,-30,-17,112,-22,45,83, -11,-38,-27,34,15,61,-39,16,2,-4,8,10,14,-51,-11,-11,-47,-5,18,24,-27,5,-25,1,-4,17,1,52,-2,0,36,27,21,46,19,-24,-9,-22,-40,6,17,-9,25,7,-75,-29,-16,2,0,-10,0,-6,-8,13,-22,-2,-2,-48,20,-32,-18,47,7,-28,-11,-3,33,-45,50,12,58,-18,25,-63,-18,29,10,11,-6,28,-29,37,95,-13,-17,53,41,-8,102,14,5,-13,10,-23,-7,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0067254495806992054, 0.0045937448740005493, 0.0080331433564424515, 0.0014836594928056002, 0.0063163074664771557, 0.0078092790208756924, 0.011231308802962303, 0.0036877687089145184, 0.0057680248282849789, 0.01366477832198143, 0.009253338910639286, 0.015289365313947201, 0.0048050885088741779, 0.016110742464661598, 0.0068313251249492168, 0.0051645673811435699, 0.0039138928987085819, 0.011557201854884624, 0.0024128190707415342, 0.0096301352605223656, 0.0017803333466872573, 0.0073403553105890751, 0.005743375513702631, 0.015576754696667194, 0.010667229071259499, 0.0089845815673470497, 0.0057131401263177395, 0.0076215690933167934, 0.0035439606290310621, 0.0042791478335857391, 0.0069823465310037136, 0.0064218207262456417, 0.0049642659723758698, 0.0067400163970887661, 0.0079793650656938553, 0.0038209839258342981, 0.016762660816311836, 0.0065242755226790905, 0.0021282306406646967, 0.008486689068377018, 0.0092086335644125938, 0.017592364922165871, 0.015354075469076633, 0.0073253116570413113, 0.0082949493080377579, 0.0023622927255928516, 0.0092555256560444832, 0.0068814102560281754, 0.0034091973211616278, 0.0063842898234724998, 0.0089785605669021606, 0.0042830752208828926, 0.010702096857130527, 0.011570013128221035, 0.010629479773342609, 0.027042742818593979, 0.010191044770181179, 0.010600008070468903, 0.0044060694053769112, 0.0034359344281256199, 0.014471572823822498, 0.0052890162914991379, 0.011614831164479256, 0.0045509776100516319, 0.0088169677183032036, 0.015355509705841541, 0.0043388144113123417, 0.0049827494658529758, 0.015800606459379196, 0.00816352479159832, 0.0066650337539613247, 0.0034828574862331152, 0.0052202930673956871, 0.0056057018227875233, 0.006797111127525568, 0.010053958743810654, 0.01912236213684082, 0.0020869330037385225, 0.0093954876065254211, 0.0076659368351101875, 0.0079537173733115196, 0.02078871987760067, 0.0065475497394800186, 0.007012487854808569, 0.0054363654926419258, 0.0045799827203154564, 0.005089309997856617, 0.0085712941363453865, 0.0094037316739559174, 0.0064910375513136387, 0.0074894940480589867, 0.0047476203180849552, 0.0060780025087296963, 0.016702985391020775, 0.065815962851047516, 0.0033395763020962477, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 13900, 1584, 6323, -813, 3147, 4295, 17044, 5936, -1263, 14600, 7956, 2737, 6856, 26537, 135, -2301, 6579, 14797, 2221, -204, -621, 19599, 5753, 2918, 11251, 6900, 4361, 4605, 141, 108, 12483, 6875, 13137, 2874, 4592, -476, 12404, 12195, 743, 6508, 979, 18228, 13364, 3929, 4792, 8408, 21760, 6055, 5551, 4350, 408, -822, 16304, 5055, 10977, 17544, -287, 6802, 3577, 2846, 19534, 4731, 3849, 6397, 5949, 12941, 7006, -629, 25684, 6291, 10498, -951, -915, 2643, 1451, 3148, 24466, 13029, 17821, -2609, 4266, -6999, -2553, 980, 7444, 5561, 7013, 4896, 13548, 5080, 8683, 3877, 12865, 13372, -8319, 13441, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0001925890683196485, 0.00025813505635596812, 0.0002097633114317432, 0.0006916626007296145, 0.00047403282951563597, 0.00021425490558613092, 0.00018731408636085689, 0.00059344770852476358, 0.00035973885678686202, 0.00012326994328759611, 0.00018513573741074651, 0.00029724443447776139, 0.00040520835318602622, 0.000180040966370143, 0.0002737365139182657, 0.00029163691215217113, 0.00032201450085267425, 0.00015407614409923553, 0.00022402885952033103, 0.00084836286259815097, 0.00050506158731877804, 0.00012656587932724506, 0.00027084539760835469, 0.00027654189034365118, 0.00015436623652931303, 0.00031008259975351393, 0.00032893306342884898, 0.0001979099033633247, 0.00064730242593213916, 0.00031010716338641942, 0.00011794842430390418, 0.00025066803209483624, 0.00015105056809261441, 0.00037394947139546275, 0.00036599228042177856, 0.00054974848171696067, 0.00018716382328420877, 0.00020724193018395454, 0.00053580803796648979, 0.00015115954738575965, 0.00040303412242792547, 0.00010969348659273237, 0.00015989919484127313, 0.00017073922208510339, 0.00024532029055990279, 0.00038025231333449483, 0.00013300259888637811, 0.00024425904848612845, 0.00028603404643945396, 0.00021298941283021122, 0.00041401167982257903, 0.00081928184954449534, 0.00016621805843897164, 0.00030304875690490007, 0.0002102592698065564, 0.00010438347089802846, 0.0003697587235365063, 0.00025559318601153791, 0.00023183976009022444, 0.00055608729599043727, 8.8194399722851813e-05, 0.00027591164689511061, 0.00027106396737508476, 0.00042920536361634731, 0.00015927375352475792, 0.00010403310443507507, 0.00027916513499803841, 0.00058001582510769367, 0.00010256526002194732, 0.00018339039525017142, 0.00017608643975108862, 0.00045066257007420063, 0.000353429582901299, 0.00042891624616459012, 0.00036345372791402042, 0.00036247033858671784, 9.7351512522436678e-05, 0.00033830601023510098, 9.1896705271210521e-05, 0.0004365215718280524, 0.00024093904357869178, 0.0002817670174408704, 0.00013727913028560579, 0.00034769368357956409, 0.00020032170868944377, 0.00027789329760707915, 0.00023120269179344177, 0.00028281443519517779, 0.00012746990250889212, 0.00031324138399213552, 0.00015753677871543914, 0.00046658152132295072, 0.00015832738426979631, 0.0002019309758907184, 0.00034971046261489391, 0.00024620088515803218, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 27,8,17,98,62,-33,-5,-68,98,49,-125,-127,51,46,29,-68, 
  /* [1][0][][] */ 25,121,33,-12,127,-68,18,55,25,106,-25,98,-9,-21,56,-77, 
  /* [2][0][][] */ -3,-28,30,-27,-122,6,-18,74,-30,-82,-19,15,-32,-85,25,-127, 
  /* [3][0][][] */ 127,86,17,0,-107,-39,-67,-22,-1,17,126,-61,-80,70,-40,-21, 
  /* [4][0][][] */ 6,-28,19,1,-21,19,-6,39,-28,-38,-13,18,-11,-127,48,11, 
  /* [5][0][][] */ 96,-30,-2,-17,-3,-73,-35,11,-11,8,-127,-49,46,13,-8,71, 
  /* [6][0][][] */ -117,-70,-55,88,-27,-65,-127,8,-119,-102,-32,5,37,92,16,115, 
  /* [7][0][][] */ -22,7,-65,18,-6,-127,-14,15,21,-25,11,-36,-30,8,-23,-4, 
  /* [8][0][][] */ 21,-35,-37,6,30,-10,-63,-49,-25,9,-78,35,-127,24,-20,35, 
  /* [9][0][][] */ 15,-69,29,73,9,27,-20,-127,99,-85,52,-25,-56,45,-86,68, 
  /* [10][0][][] */ -62,-79,61,-61,40,83,-68,18,107,-127,-33,24,31,-2,-31,52, 
  /* [11][0][][] */ 73,-23,-127,-1,69,34,-51,39,-18,-52,-15,-2,13,23,-45,29, 
  /* [12][0][][] */ 52,-14,-54,-37,3,-127,-14,-49,54,40,-85,1,-64,-7,42,51, 
  /* [13][0][][] */ 28,-127,14,-37,23,31,-68,-21,40,-55,28,56,78,46,48,-21, 
  /* [14][0][][] */ -54,40,-58,-48,58,-127,41,-69,14,42,-11,-107,-4,50,1,0, 
  /* [15][0][][] */ 73,54,119,73,87,-23,3,-7,71,-53,-127,22,-120,-78,-15,17, 
  /* [16][0][][] */ -127,48,9,44,-58,83,25,-7,-5,44,78,-15,18,-29,0,-97, 
  /* [17][0][][] */ -8,-12,-47,-18,-45,26,59,62,-9,127,-29,19,6,73,75,-6, 
  /* [18][0][][] */ 10,127,-28,-26,7,-5,41,-91,15,122,-53,97,-13,-50,9,-94, 
  /* [19][0][][] */ -18,-9,30,27,14,24,15,17,22,36,-35,-15,-127,-2,19,33, 
  /* [20][0][][] */ 91,-43,8,-71,-9,36,64,-98,-22,60,-127,-7,7,5,60,-34, 
  /* [21][0][][] */ 102,9,127,38,-57,106,74,-7,30,112,-35,-17,-65,89,6,-24, 
  /* [22][0][][] */ 77,-32,28,67,21,39,20,127,-40,-37,29,25,4,68,41,60, 
  /* [23][0][][] */ 3,27,-46,23,0,-127,-6,35,-23,-40,-25,1,-29,-1,-30,32, 
  /* [24][0][][] */ 45,-43,17,-59,72,12,-54,-19,10,16,60,85,-34,106,127,51, 
  /* [25][0][][] */ -127,-110,-74,-14,33,28,30,5,-61,-48,-1,19,21,100,56,58, 
  /* [26][0][][] */ 2,4,23,1,-12,10,8,55,-46,-23,-33,-24,5,-127,50,-14, 
  /* [27][0][][] */ -127,72,-19,32,16,-9,30,55,39,-29,115,30,-45,-4,-61,-47, 
  /* [28][0][][] */ -3,-8,23,36,-8,4,15,93,29,20,-36,-9,-127,-4,-13,46, 
  /* [29][0][][] */ -2,44,26,-36,55,-17,11,-14,-127,26,-8,11,-17,6,-77,6, 
  /* [30][0][][] */ 2,37,-127,20,53,-73,-25,29,-77,-50,-27,15,-30,-91,-4,-6, 
  /* [31][0][][] */ 127,-70,-74,1,35,-4,-57,69,-14,-3,-105,-43,45,-2,-24,62, 
  /* [32][0][][] */ -105,65,46,44,20,95,29,56,17,28,127,4,-16,1,-22,-41, 
  /* [33][0][][] */ 21,-5,116,-59,-112,-29,22,-127,14,35,-4,-16,-52,28,115,37, 
  /* [34][0][][] */ 3,-34,-54,-42,8,-3,14,-15,4,-14,-44,-127,8,72,29,16, 
  /* [35][0][][] */ -4,-9,0,78,39,-30,46,-2,-127,86,-52,16,-2,80,13,-10, 
  /* [36][0][][] */ -68,-8,-39,8,11,16,64,59,1,42,127,-26,-23,-17,6,-13, 
  /* [37][0][][] */ -45,-49,127,-44,-75,-73,70,-8,42,30,1,-50,20,-96,29,-49, 
  /* [38][0][][] */ 21,-27,-11,17,15,-47,-43,-25,5,6,68,-65,127,39,3,48, 
  /* [39][0][][] */ -28,-50,30,-81,-82,-50,-21,127,-85,-72,26,-111,-18,77,58,87, 
  /* [40][0][][] */ 41,-16,34,22,-9,127,17,4,48,62,-3,0,93,1,-21,-39, 
  /* [41][0][][] */ 13,-54,-87,-127,47,-36,-11,-85,-3,-46,42,-63,3,6,26,86, 
  /* [42][0][][] */ 44,30,0,110,-34,-21,-105,-15,-20,-43,67,-66,-70,127,-29,-5, 
  /* [43][0][][] */ 45,75,-5,127,13,64,28,-40,-20,37,5,59,1,-18,24,13, 
  /* [44][0][][] */ -24,-48,-127,11,63,109,-70,108,-2,-55,22,-46,60,6,-75,7, 
  /* [45][0][][] */ 20,-2,11,-127,-45,14,12,5,-4,1,-21,55,11,-103,7,-6, 
  /* [46][0][][] */ 15,65,-16,-102,40,-32,-127,-16,3,-45,14,29,27,109,70,47, 
  /* [47][0][][] */ 9,-70,42,-81,-83,1,-83,67,12,-46,28,-8,32,-127,59,40, 
  /* [48][0][][] */ -30,-3,-17,-127,5,-11,-3,3,33,-39,26,-41,18,47,34,49, 
  /* [49][0][][] */ 34,-29,-10,101,123,0,2,40,-77,37,43,45,-21,22,127,-15, 
  /* [50][0][][] */ -4,14,35,17,33,127,-44,-100,52,-17,71,18,34,3,10,-93, 
  /* [51][0][][] */ 48,90,-1,7,20,-13,-77,16,117,9,-2,127,26,48,86,-46, 
  /* [52][0][][] */ -37,49,111,-13,-33,-43,-7,-57,-32,42,6,-35,8,77,-127,-12, 
  /* [53][0][][] */ 34,-30,-40,-127,-58,10,11,5,-13,51,-9,9,32,-20,38,46, 
  /* [54][0][][] */ 78,52,-74,-58,45,-69,-69,-3,3,-64,-9,-17,29,127,-20,39, 
  /* [55][0][][] */ -21,-81,-96,-72,-44,-116,33,-117,12,-49,-61,-26,-9,-127,-89,-67, 
  /* [56][0][][] */ 23,43,32,56,-10,-9,43,127,21,-4,-6,-41,56,-21,-42,19, 
  /* [57][0][][] */ 85,17,127,-28,-95,-74,8,-43,13,33,-38,-46,-22,-32,-6,-4, 
  /* [58][0][][] */ 127,71,27,126,-126,58,-7,33,-7,6,94,-55,-48,-15,10,-77, 
  /* [59][0][][] */ 127,-7,-3,2,-27,-12,-23,15,-23,6,-75,-11,39,-8,7,15, 
  /* [60][0][][] */ -127,8,-69,-57,64,-3,8,12,-1,25,114,-13,-42,-29,75,-48, 
  /* [61][0][][] */ -127,43,46,71,37,14,-44,-55,122,-85,80,14,34,-24,-47,-54, 
  /* [62][0][][] */ 7,-54,-91,51,10,127,-11,84,24,-117,-19,-120,-89,-16,-106,-85, 
  /* [63][0][][] */ -26,-4,127,-26,-62,-16,9,-31,3,26,5,34,-4,-27,58,39, 
  /* [64][0][][] */ 39,127,-42,37,68,-37,118,-90,5,94,-17,39,-21,-85,-37,2, 
  /* [65][0][][] */ 20,63,11,-46,127,25,-70,-115,-46,-103,-50,-76,-6,-52,67,-11, 
  /* [66][0][][] */ -127,3,-15,2,-27,23,22,-26,-60,-17,-120,62,57,39,59,89, 
  /* [67][0][][] */ 21,-34,28,81,8,-37,-36,26,33,21,6,-31,25,-8,-127,14, 
  /* [68][0][][] */ 25,19,3,127,-27,-4,-20,-44,-71,26,0,-11,-26,-99,-1,-26, 
  /* [69][0][][] */ 7,57,58,127,39,24,77,-71,6,31,41,45,5,-15,-12,-36, 
  /* [70][0][][] */ -66,-32,38,-83,92,34,96,28,127,3,119,-23,-45,125,65,89, 
  /* [71][0][][] */ 41,32,18,92,40,-127,-45,104,56,-111,-14,-18,26,-25,-35,39, 
  /* [72][0][][] */ -127,-49,-34,49,43,16,-10,-8,-44,-24,-53,34,25,5,13,72, 
  /* [73][0][][] */ -35,-43,-23,15,-47,-38,-24,-8,63,-27,6,5,-1,127,-79,-19, 
  /* [74][0][][] */ 21,-36,3,-40,-15,-40,14,-36,14,4,-62,22,-127,-12,60,15, 
  /* [75][0][][] */ -20,39,-17,127,-41,44,23,-10,-54,3,-8,9,31,-3,-32,-36, 
  /* [76][0][][] */ 2,-22,-7,34,29,12,-33,-90,18,-127,11,0,-15,3,54,-30, 
  /* [77][0][][] */ 127,10,29,48,-33,-23,-11,-19,46,6,-11,84,-1,9,-40,39, 
  /* [78][0][][] */ -3,-57,44,-22,11,25,-38,62,89,-32,-40,-113,4,127,21,-43, 
  /* [79][0][][] */ 0,44,25,17,69,41,-42,-50,9,-52,91,5,127,-42,-43,-37, 
  /* [80][0][][] */ -127,-47,-27,51,-3,61,61,-4,-50,-20,-49,-11,21,-63,-68,-17, 
  /* [81][0][][] */ 61,-26,-50,44,125,99,34,9,16,-127,0,-96,-34,-24,-85,-6, 
  /* [82][0][][] */ 99,115,-13,43,-57,-27,-61,-16,-92,-15,127,3,-48,95,-16,-20, 
  /* [83][0][][] */ 127,16,34,-18,24,-11,-14,25,28,30,63,-28,-47,-19,-37,-82, 
  /* [84][0][][] */ 1,-79,-89,-33,23,6,2,-127,-8,-21,33,-15,-40,-42,2,-22, 
  /* [85][0][][] */ 17,1,-76,-13,-4,-5,75,71,-40,127,-23,-40,51,32,84,-30, 
  /* [86][0][][] */ 120,-38,34,-10,-46,-23,-14,-21,-1,-10,-127,28,18,17,-22,35, 
  /* [87][0][][] */ -4,85,3,-57,-26,68,-13,127,-33,-11,65,-12,12,-102,56,13, 
  /* [88][0][][] */ -65,-63,-72,-50,92,-35,-10,-127,87,-28,3,41,-58,18,93,7, 
  /* [89][0][][] */ 52,-3,-30,-127,17,-30,-52,79,79,-53,-6,-50,19,90,64,64, 
  /* [90][0][][] */ -38,22,-38,109,75,58,118,-127,41,70,-35,32,37,-4,-33,-43, 
  /* [91][0][][] */ 13,-39,-80,-20,27,-127,1,-23,-1,-16,-65,0,33,4,-9,26, 
  /* [92][0][][] */ 32,8,94,47,127,45,-22,27,-35,12,-56,124,33,96,8,14, 
  /* [93][0][][] */ 127,-40,-34,-30,2,-30,-4,45,-26,35,-61,-24,2,44,-4,53, 
  /* [94][0][][] */ 16,-11,35,67,81,-16,7,93,5,11,-38,26,14,127,-16,-76, 
  /* [95][0][][] */ -109,16,37,57,10,57,-18,8,6,-29,127,-20,2,68,-16,-14, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00068126001860946417, 0.00091312086442485452, 0.00074201181996613741, 0.0024466710165143013, 0.0016768325585871935, 0.00075790024129673839, 0.00066260044695809484, 0.002099247882142663, 0.0012725318083539605, 0.0004360521852504462, 0.00065489480039104819, 0.0010514655150473118, 0.0014333744766190648, 0.00063687266083434224, 0.00096830911934375763, 0.0010316295083612204, 0.0011390865547582507, 0.00054502533748745918, 0.00079247442772611976, 0.003000978846102953, 0.0017865928821265697, 0.00044771115062758327, 0.00095808214973658323, 0.00097823282703757286, 0.0005460514803417027, 0.0010968788992613554, 0.0011635600822046399, 0.00070008181501179934, 0.0022897524759173393, 0.0010969657450914383, 0.00041722797323018312, 0.00088670721743255854, 0.00053432275308296084, 0.0013228000607341528, 0.0012946524657309055, 0.0019446674268692732, 0.00066206889459863305, 0.00073309271829202771, 0.0018953548278659582, 0.00053470820421352983, 0.0014256833819672465, 0.00038802716881036758, 0.00056562363170087337, 0.00060396891785785556, 0.00086779019329696894, 0.0013450955739244819, 0.00047048027045093477, 0.0008640362648293376, 0.0010118101490661502, 0.00075342372292652726, 0.0014645152259618044, 0.002898108446970582, 0.00058797583915293217, 0.0010719975689426064, 0.00074376619886606932, 0.00036924364394508302, 0.0013079758500680327, 0.00090412929421290755, 0.00082010449841618538, 0.0019670901820063591, 0.00031197679345495999, 0.00097600341541692615, 0.00095885526388883591, 0.001518260920420289, 0.00056341121671721339, 0.00036800425732508302, 0.00098751217592507601, 0.0020517343655228615, 0.00036281193024478853, 0.00064872088842093945, 0.00062288402114063501, 0.0015941631281748414, 0.0012502134777605534, 0.0015172382118180394, 0.0012856726534664631, 0.0012821940472349524, 0.00034436894929967821, 0.0011967157479375601, 0.00032507325522601604, 0.0015441410942003131, 0.00085229211254045367, 0.00099671597126871347, 0.00048560797586105764, 0.0012299234513193369, 0.00070861331187188625, 0.00098301318939775229, 0.00081785098882392049, 0.0010004211217164993, 0.00045090905041433871, 0.0011080526746809483, 0.00055726687423884869, 0.0016504744999110699, 0.00056006357772275805, 0.00071430590469390154, 0.0012370576150715351, 0.00087090523447841406, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -35858, 9880, -803, -7547, 632, -6409, -10879, -42399, 3366, 19932, 37989, -1069, -7997, -20394, 45053, -44048, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00061292044119909406, 0.00052623049123212695, 0.00091442500706762075, 0.001027106074616313, 0.00066269398666918278, 0.0010786185739561915, 0.00080083665670827031, 0.00051284854998812079, 0.00047695401008240879, 0.00063683139160275459, 0.00078111985931172967, 0.00056439603213220835, 0.00062226119916886091, 0.0011352130677551031, 0.00049815536476671696, 0.00054505979642271996, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -30,5,-28,-9,14,-14,-10,111,-66,13,39,-12,18,-6,-6,-7,31,-7,-19,-11,74,-12,18,127,-28,84,-2,-18,31,-30,53,-20,-22,46,31,-47,27,36,16,-22,-125,-21,20,52,39,16,-112,-33, 
  /* [1][0][][] */ -54,-17,11,-1,-33,6,9,66,-85,-26,6,-72,-23,-24,-11,-18,-39,127,-25,25,-5,18,-43,-12,31,-68,15,14,-32,-120,-40,19,-27,-16,54,-11,19,-51,-2,20,-20,-27,121,28,13,-9,26,11, 
  /* [2][0][][] */ -37,-1,-10,-32,-6,-66,7,-11,3,14,18,33,17,13,-21,30,-2,-14,-17,-8,0,4,-9,-127,-17,82,-17,10,0,-18,5,-26,1,49,5,-3,10,4,26,-1,-41,10,-20,-12,-2,1,21,5, 
  /* [3][0][][] */ -10,43,6,-39,-9,-5,8,0,-24,2,0,32,-127,14,1,-8,5,10,-19,-2,-27,3,0,17,-10,-10,17,21,0,14,-3,19,4,3,22,19,-3,19,37,15,6,4,26,-26,7,-12,1,14, 
  /* [4][0][][] */ 37,-36,5,10,35,32,10,-30,-51,-13,-10,-31,-4,19,-6,-13,11,-5,-89,6,-9,2,33,90,7,-45,-18,49,3,-107,18,29,9,-37,43,-127,23,38,8,4,-16,27,-9,-25,-18,-28,22,-3, 
  /* [5][0][][] */ 34,-1,-42,59,-1,0,11,35,0,10,32,12,0,46,5,10,-16,16,21,-8,11,-10,3,-33,-4,-54,18,-15,-9,-10,-7,7,80,-125,-3,32,-18,-15,17,-5,-99,56,27,2,5,-13,-127,-4, 
  /* [6][0][][] */ 33,4,5,0,-18,-2,8,-8,2,6,-2,-1,-27,7,8,3,-9,-14,127,16,-11,14,8,-40,15,4,33,-18,-15,1,-3,-1,7,-16,36,-43,7,-41,74,32,-2,-13,-3,10,-3,-1,-3,-9, 
  /* [7][0][][] */ -39,-22,-30,37,-12,98,-6,43,4,36,-16,127,65,21,-6,-21,-4,-29,2,-19,-31,-12,-9,43,7,-28,-16,-15,-23,-6,5,-11,10,-4,-24,2,20,-58,86,14,14,17,-76,-66,8,-1,-11,-6, 
  /* [8][0][][] */ -43,-60,8,12,0,-3,1,20,7,-86,15,59,47,4,0,13,-22,66,-17,4,-24,25,-19,-13,4,11,15,54,17,127,7,13,-6,21,-23,-114,-122,64,21,37,14,-9,125,-22,6,28,21,22, 
  /* [9][0][][] */ -18,15,-8,38,5,-29,-2,-1,74,-42,19,50,-50,18,35,1,-12,32,-41,-3,35,-6,-3,-19,2,16,59,-31,11,18,20,-4,-9,9,71,-96,-3,-127,-93,28,-28,21,66,1,1,10,-12,-47, 
  /* [10][0][][] */ -14,-21,-27,-127,33,70,25,-7,-11,28,20,3,47,-63,-45,15,41,-41,49,-38,22,-42,37,55,-57,-106,-3,-32,50,23,27,-45,-12,-64,20,3,7,-30,4,-51,-32,-64,-29,11,14,9,2,-33, 
  /* [11][0][][] */ 10,38,3,76,28,-80,-80,-20,5,83,-10,2,3,62,-16,-75,45,53,-7,-36,-56,-109,7,-3,0,-33,68,-20,73,-55,7,-94,53,3,-50,-109,96,8,-3,-127,2,45,127,-81,11,-82,16,51, 
  /* [12][0][][] */ 122,5,-26,30,1,21,-15,105,31,-7,-58,-14,-2,19,-16,0,6,-4,5,-20,9,-9,-12,20,2,20,6,10,1,17,-5,12,14,-63,-8,14,-22,-23,-26,-9,-10,-77,6,-127,-73,-9,76,-4, 
  /* [13][0][][] */ 14,-6,0,1,4,-11,4,-3,-4,7,10,18,-4,4,11,-8,8,7,7,4,14,-12,13,-2,2,0,12,127,12,-5,5,-5,7,1,-40,24,7,-7,7,-17,-17,-2,11,4,4,-1,-5,-16, 
  /* [14][0][][] */ 83,-35,47,-96,65,27,17,-111,-71,-68,-9,127,-84,-12,89,-20,63,23,-81,49,21,-7,81,-18,25,62,-3,-118,28,-44,76,85,16,68,-126,-64,-28,43,93,8,-53,16,64,5,-2,-6,4,-67, 
  /* [15][0][][] */ -4,-46,-53,-49,41,40,61,-45,-18,5,-29,-35,68,28,-75,47,63,66,75,-70,-87,-38,50,-25,-82,34,37,58,75,56,71,-35,30,58,96,115,-15,-97,-1,-34,74,52,127,-49,2,-39,-8,58, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026049118489027023, 0.022364795207977295, 0.038863062858581543, 0.0436520054936409, 0.028164494782686234, 0.045841287821531296, 0.034035556018352509, 0.021796062588691711, 0.020270545035600662, 0.027065334841609001, 0.033197592943906784, 0.023986831307411194, 0.026446100324392319, 0.048246555030345917, 0.021171603351831436, 0.023165041580796242, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2687, 42615, -980, 58447, 4472, 125741, -3159, 41569, 2708, 35245, 24986, 9700, -5658, 33559, -1441, -2091, -98, 1322, 6074, -3031, 1051, -1957, -467, -23987, -3676, 49798, 132711, 118795, 1074, 7967, -1073, -649, 23982, 1603, 69141, 410, 49073, 2319, 55888, 1168, 2205, 72062, 75, 2054, 46092, 65, 3885, 44944, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.933410961413756e-05, 3.4426659112796187e-05, 0.0002406605490250513, 4.2156043491559103e-05, 0.00013973002205602825, 6.5450120018795133e-05, 0.00014309276593849063, 0.00013725741882808506, 7.8294775448739529e-05, 3.7906465877313167e-05, 4.4163527491036803e-05, 7.0149202656466514e-05, 4.6758133976254612e-05, 3.497032230370678e-05, 0.00015990345855243504, 0.0001861714554252103, 0.00016836084250826389, 6.0600636061280966e-05, 8.5280626080930233e-05, 0.0002147193590644747, 6.5423839259892702e-05, 0.00020772368588950485, 9.4320974312722683e-05, 0.00013900423073209822, 0.00011479455861262977, 8.7023443484213203e-05, 2.6240008082822897e-05, 5.4407442803494632e-05, 0.0001226230087922886, 9.4146154879126698e-05, 8.8027649326249957e-05, 0.00016026977391447872, 4.2828021832974628e-05, 0.00010274184023728594, 2.2417580112232827e-05, 5.6112294259946793e-05, 0.00011931198969250545, 8.7317916040774435e-05, 0.00010163066326640546, 0.00011462317343102768, 9.8007534688804299e-05, 8.0693491327110678e-05, 9.314314229413867e-05, 7.7713833888992667e-05, 3.4259930544067174e-05, 0.00016370855155400932, 9.1139409050811082e-05, 2.2609507141169161e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 79,-108,98,69,52,-33,106,-70,73,-88,-81,50,54,-46,-74,-92,101,81,47,83,67,-72,-82,56,-36,-43,-63,-69,-66,69,-63,-109,-19,44,71,66,-67,52,-50,-19,50,-75,62,68,-89,12,80,-36, 89,-103,127,82,-77,-67,-54,-86,102,-99,-66,77,82,-113,-97,86,-38,100,86,127,84,-111,54,73,-58,-77,-72,-85,57,79,-29,-127,-87,82,83,83,-82,84,-85,-18,77,-96,88,97,-74,-127,94,-109, 42,-56,73,40,19,-44,-48,-43,60,-38,5,38,31,-77,-50,-3,-56,37,34,74,31,-52,31,28,-30,-49,-48,-28,33,35,89,-88,-87,48,39,35,-34,38,-37,-8,40,-45,39,48,-2,-9,35,-77, 
  /* [0][1][][] */ 98,-127,-43,93,55,-81,127,-87,91,-116,-74,83,85,-111,-13,-127,127,114,70,-34,86,105,-127,76,72,-77,-95,-102,-127,92,-70,-5,-86,73,111,97,-86,82,-80,94,85,-102,89,99,-86,107,94,-95, 127,-127,-65,127,-127,-127,-87,-127,127,-127,-127,127,127,-127,-23,96,-67,127,127,-50,127,127,71,127,127,-127,-127,-127,51,127,-30,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 64,-89,-35,70,39,-63,-49,-64,61,-50,-60,61,48,-51,-11,13,-69,53,55,-24,58,65,54,66,66,-68,-64,-49,39,60,127,17,-66,70,54,53,-51,60,-62,57,62,-61,53,65,-67,-66,60,-57, 
  /* [0][2][][] */ 45,-63,-49,45,28,-53,65,-45,42,-77,-5,45,59,-79,81,-81,77,55,35,-29,26,-14,-78,32,-29,-48,-51,-50,-76,35,-42,94,-76,41,51,43,-30,45,-48,-87,47,-52,42,51,-23,19,41,-86, 76,-74,-51,78,-56,-67,-70,-68,49,-79,-68,66,76,-56,127,32,-45,62,68,-47,57,-19,41,67,-54,-72,-80,-64,31,61,-23,115,-60,67,57,58,-50,67,-68,-112,67,-69,61,68,-80,48,66,-65, 41,-49,-27,46,31,-22,-18,-36,24,-37,-50,33,34,-1,73,27,-39,26,27,-34,29,-3,42,44,-29,-34,-49,-26,36,38,61,69,-8,37,17,23,-24,34,-32,-58,31,-32,27,30,-64,7,37,-11, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033716994803398848, 0.0014631330268457532, 0.010228073224425316, 0.0017916318029165268, 0.005938525777310133, 0.002781630028039217, 0.0060814423486590385, 0.0058334399946033955, 0.0033275280147790909, 0.0016110247233882546, 0.0018769499147310853, 0.002981340978294611, 0.0019872207194566727, 0.0014862386742606759, 0.0067958971485495567, 0.0079122865572571754, 0.0071553359739482403, 0.0025755269452929497, 0.0036244264338165522, 0.0091255726292729378, 0.0027805131394416094, 0.0088282562792301178, 0.0040086414664983749, 0.0059076794423162937, 0.0048787686973810196, 0.0036984963808208704, 0.0011152003426104784, 0.0023123163264244795, 0.0052114776335656643, 0.0040012113749980927, 0.0037411749362945557, 0.0068114651367068291, 0.0018201909260824323, 0.0043665282428264618, 0.00095274712657555938, 0.0023847725242376328, 0.0050707594491541386, 0.0037110114935785532, 0.0043193032033741474, 0.0048714848235249519, 0.0041653201915323734, 0.003429473377764225, 0.0039585833437740803, 0.0033028377220034599, 0.0014560470590367913, 0.0069576133973896503, 0.0038734248373657465, 0.00096090399893000722, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 553, 994, 2894, 302, 9999, 13326, 2117, -368, -766, -504, 879, 905, 3280, 866, 28391, 2771, 1959, -1226, -497, 3431, -1697, 12235, 8516, 13023, 7351, 87, 3679, 4025, 5636, -682, 9246, 4778, 473, -41, 4175, 3352, -1947, 476, -589, 5770, 507, -421, -1116, 302, 1295, 2720, 599, 910, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00036815181374549866, 0.00067592400591820478, 0.00020293354464229196, 0.00031339007546193898, 0.0002162479649996385, 0.00029706500936299562, 0.00047516179620288312, 0.00020003110694233328, 0.0003621176874730736, 0.0007329392246901989, 0.0011445796117186546, 0.00030245853122323751, 0.00038533299812115729, 0.00080752046778798103, 0.0001252089423360303, 0.00044615054503083229, 0.00028897690935991704, 0.00035554781788960099, 0.00020262840553186834, 0.0002969832275994122, 0.00036174766137264669, 0.00021021603606641293, 0.00042746579856611788, 0.00012592262646649033, 0.00022466407972387969, 0.00033954347600229084, 0.0018862431170418859, 0.00045594770926982164, 0.00030503390007652342, 0.00038064821274019778, 0.00027531370869837701, 0.00024736893828958273, 0.00081748788943514228, 0.00026749112294055521, 0.00087872165022417903, 0.00054252857808023691, 0.00068925949744880199, 0.00029575882945209742, 0.00023963618150446564, 0.00032782315975055099, 0.00020590462372638285, 0.00029128682217560709, 0.00028170915902592242, 0.00025889041717164218, 0.001512194168753922, 0.00048564633470959961, 0.00037542471545748413, 0.001231580157764256, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,-8,78,-39,39,25,-34, 
  /* [1][0][][] */ 60,88,48,55,16,-61,127,110, 
  /* [2][0][][] */ -70,-3,-5,8,-127,-48,66,40, 
  /* [3][0][][] */ 84,6,-14,-127,-102,11,31,-34, 
  /* [4][0][][] */ -127,22,-19,33,77,-20,77,41, 
  /* [5][0][][] */ -81,-23,28,-15,-127,2,10,89, 
  /* [6][0][][] */ 7,-127,77,-36,-9,10,-10,27, 
  /* [7][0][][] */ -70,-2,8,96,127,-31,-35,-5, 
  /* [8][0][][] */ 70,32,-17,-127,-9,-18,-45,-51, 
  /* [9][0][][] */ -7,-111,-29,16,-15,88,-49,127, 
  /* [10][0][][] */ -80,-12,21,14,-127,57,53,-24, 
  /* [11][0][][] */ 127,17,25,21,-63,-37,-41,-114, 
  /* [12][0][][] */ 7,23,32,-6,2,-78,127,54, 
  /* [13][0][][] */ 46,-28,-15,-25,127,107,105,-34, 
  /* [14][0][][] */ 127,63,-87,48,-104,-44,-38,30, 
  /* [15][0][][] */ -10,-127,12,1,-3,4,0,35, 
  /* [16][0][][] */ -51,4,-3,-9,-127,-18,-2,5, 
  /* [17][0][][] */ -32,70,-110,20,27,-127,121,-33, 
  /* [18][0][][] */ 127,-39,-24,-1,-70,36,-6,98, 
  /* [19][0][][] */ 127,-21,-6,7,55,-3,33,3, 
  /* [20][0][][] */ 127,28,14,115,-4,23,23,-47, 
  /* [21][0][][] */ 55,38,-83,3,-47,82,-127,-98, 
  /* [22][0][][] */ -127,3,-12,-9,-42,-4,-56,1, 
  /* [23][0][][] */ -44,-64,-9,36,-127,58,88,-12, 
  /* [24][0][][] */ 109,16,-16,-48,-127,-25,-13,-6, 
  /* [25][0][][] */ 23,-14,5,-22,127,38,59,-42, 
  /* [26][0][][] */ 0,-90,16,-35,4,-127,90,-43, 
  /* [27][0][][] */ -21,-127,33,-25,-4,-54,34,-9, 
  /* [28][0][][] */ -56,48,-3,32,-30,18,127,24, 
  /* [29][0][][] */ -21,50,3,16,-1,38,-121,-127, 
  /* [30][0][][] */ 127,-4,22,15,-91,9,-52,-29, 
  /* [31][0][][] */ -9,19,61,11,25,-70,127,32, 
  /* [32][0][][] */ -77,21,-8,3,-105,-127,-93,48, 
  /* [33][0][][] */ -23,6,11,27,-127,-64,-55,16, 
  /* [34][0][][] */ -8,-127,51,-11,21,61,-62,40, 
  /* [35][0][][] */ -24,-47,-127,-9,-1,-62,43,-58, 
  /* [36][0][][] */ 6,127,70,-3,-2,8,-26,-61, 
  /* [37][0][][] */ -127,32,31,-25,63,-29,-17,-83, 
  /* [38][0][][] */ -114,-23,-42,1,31,19,52,127, 
  /* [39][0][][] */ -18,-30,68,-12,44,-84,127,105, 
  /* [40][0][][] */ -13,-32,-16,-37,-127,93,88,-24, 
  /* [41][0][][] */ -127,54,6,-73,-84,-111,-100,45, 
  /* [42][0][][] */ -53,-127,-111,-9,-2,54,-115,-107, 
  /* [43][0][][] */ -61,4,-7,-127,101,59,52,9, 
  /* [44][0][][] */ 127,-13,13,-114,16,-47,-19,48, 
  /* [45][0][][] */ -17,-127,-9,-9,-4,-78,84,-6, 
  /* [46][0][][] */ 127,-15,-2,-15,122,-42,-38,4, 
  /* [47][0][][] */ 127,5,3,101,-9,29,26,-47, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00067779870005324483, 0.0012444333406165242, 0.00037361786235123873, 0.00057697767624631524, 0.0003981308254878968, 0.00054692185949534178, 0.00087481312220916152, 0.00036827422445639968, 0.00066668936051428318, 0.0013494031736627221, 0.0021072679664939642, 0.00055685179540887475, 0.00070943072205409408, 0.0014867136487737298, 0.00023052027972880751, 0.00082140095764771104, 0.00053203100105747581, 0.00065459363395348191, 0.0003730560711119324, 0.00054677127627655864, 0.00066600809805095196, 0.00038702553138136864, 0.00078700075391680002, 0.00023183423036243767, 0.00041362561751157045, 0.00062512833392247558, 0.003472733311355114, 0.00083943834761157632, 0.00056159327505156398, 0.0007008056272752583, 0.0005068758619017899, 0.00045542718726210296, 0.0015050644287839532, 0.00049247383140027523, 0.0016178010264411569, 0.00099884113296866417, 0.0012689850991591811, 0.00054451706819236279, 0.00044119052472524345, 0.00060355023015290499, 0.00037908786907792091, 0.00053628371097147465, 0.00051865045679733157, 0.0004766391939483583, 0.0027840775437653065, 0.00089411606313660741, 0.00069118873216211796, 0.0022674433421343565, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -24720, 31828, -17464, -16551, 11652, 5034, 29490, 42396, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00053360877791419625, 0.0007193146157078445, 0.0016411918913945556, 0.0017637859564274549, 0.00062916817842051387, 0.00055516615975648165, 0.00053726631449535489, 0.00092699006199836731, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -30,-35,-46,37,4,-29,5,-14,-109,115,-12,103,114,26,53,-14,-6,-30,-31,1,-8,-9,-34,-32,31,-111,30,47,-33,5,17,-37,22,-57,127,37,31,14,6,-17,86,10,-18,-45,-30,-20,-23,-29, 
  /* [1][0][][] */ 10,45,127,-23,-7,-35,9,-70,40,-5,38,9,-20,-1,4,-122,19,-78,-18,14,-26,36,10,-38,-25,-24,15,-7,10,-1,27,1,3,30,27,26,-11,-28,85,-73,-4,84,-18,25,-23,6,1,1, 
  /* [2][0][][] */ 1,-44,27,-32,25,33,2,-32,12,2,-5,20,-12,57,15,5,-36,127,-23,-43,-15,16,-33,-9,117,-1,1,-17,-12,-11,-2,-45,-11,-21,15,14,-11,5,-18,14,17,-33,-11,-1,-2,33,-20,-34, 
  /* [3][0][][] */ 8,-70,-8,4,0,-3,-1,12,-2,-10,6,18,7,-19,60,5,-1,-15,7,32,6,27,-32,0,-3,43,-6,1,-14,11,127,-3,10,16,-11,-1,-12,-9,-23,4,-4,-4,8,23,-9,2,-5,27, 
  /* [4][0][][] */ -104,15,15,15,1,-32,0,11,25,-40,35,-15,-42,-4,-22,-9,15,12,5,19,-2,-31,26,0,-15,64,-18,102,8,-17,-3,-6,-5,-127,-22,20,5,6,3,4,-37,-6,-18,17,-54,32,15,5, 
  /* [5][0][][] */ 3,23,14,-20,-57,25,-5,32,4,8,9,1,-10,-47,-2,36,-23,-90,20,6,63,-54,-1,29,10,5,-70,-44,-34,-37,31,-1,14,-70,3,-58,55,-4,-49,30,13,-48,-12,-8,127,-28,-29,-10, 
  /* [6][0][][] */ -61,-41,-15,-12,39,-53,0,-14,-4,-33,37,-12,-16,40,-1,-49,27,13,2,-38,-39,86,17,-78,-7,-11,-75,-85,43,15,-12,12,-15,-86,-37,94,-75,-23,-12,-65,17,-24,48,24,127,-30,33,12, 
  /* [7][0][][] */ 22,22,-70,22,-15,27,3,61,8,-2,53,-15,5,-23,-8,-15,-2,-127,33,-53,42,35,5,-59,29,-14,18,-10,-6,36,-12,-4,-9,25,17,-32,-31,-56,-32,-64,-14,-11,51,54,-23,-6,-12,6, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.022678373381495476, 0.030570870265364647, 0.069750651717185974, 0.074960902333259583, 0.02673964761197567, 0.023594560101628304, 0.022833816707134247, 0.039397075772285461, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52200, 1442, 10151, -1382, 5384, -5195, 1562, 25474, 1411, 24555, -3608, 15275, -7417, -1507, 21252, 14262, 1165, 16936, 24601, 15205, -273, -179, 764, 31399, -9192, 26867, 46371, 31312, 3208, 6854, -3292, 1406, 1419, 14035, -5794, 14996, -11180, 32057, -19752, 120997, 35082, 24920, 11247, -2736, 17275, 2075, 797, -3110, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035915602347813547, 0.00034415817935951054, 0.00016944184608291835, 0.00032273097895085812, 0.00012881285510957241, 0.00010921125794993713, 0.00087096053175628185, 0.00013500008208211511, 0.00018605896912049502, 0.00020181143190711737, 0.00010479520278749987, 0.0002795843465719372, 0.00025594088947400451, 0.00014972215285524726, 0.00011259734310442582, 0.0001045829922077246, 0.00019014274585060775, 0.00023554681683890522, 9.2305046564433724e-05, 0.00019064497610088438, 0.00028482329798862338, 0.00020555942319333553, 0.00024095246044453233, 7.1093447331804782e-05, 0.00016065730596892536, 0.00014629079669248313, 0.00054398662177845836, 0.00010062710498459637, 0.00019241648260504007, 0.00011922256817342713, 0.00011979295959463343, 0.00024678208865225315, 0.00068733637453988194, 0.00019897111633326858, 0.00027194549329578876, 0.00016112103185150772, 0.0003442371089477092, 8.6929932876955718e-05, 0.00031202525133267045, 2.0552804926410317e-05, 8.8908396719489247e-05, 6.0787584516219795e-05, 0.00013831646356265992, 0.00016061747737694532, 0.00013295646931510419, 0.00018092812388204038, 0.00024112334358505905, 0.00011906176223419607, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-4,18,109,3,81,0,28,16,7,9,8,-7,-8,-44,8,-4,8,-18,-116,-6,-23,127,-8,0,5,-5,10,-3,5,20,96,20,28,38,-26,2,32,-5,5,18,-72,-7,-9,19,4,-4,-8, 127,8,14,-127,26,89,10,11,121,127,9,44,-50,-23,7,7,127,-56,-57,-60,-99,26,-111,17,19,69,-29,-82,24,21,8,-123,7,-60,127,9,-39,-48,-5,117,-76,-95,-29,3,-35,-7,-127,22, -31,-6,7,14,1,66,1,17,27,4,-12,31,-11,-3,15,2,-107,27,-5,70,-31,-12,-18,-5,-3,-63,-1,32,-15,5,5,-21,10,-22,15,-17,0,48,36,-10,53,39,-15,14,-44,6,2,-5, 
  /* [0][1][][] */ 127,6,0,-97,14,-30,36,-16,11,8,-11,54,-8,-1,20,-33,0,-49,-55,-84,11,-75,-127,-17,6,97,-18,-127,-8,33,17,-108,16,-53,-3,127,-2,56,-44,45,-62,-127,40,-87,-43,-13,-11,-2, 27,-127,-127,117,-127,-127,-127,-127,-127,-99,127,-127,127,127,36,-127,-85,127,127,-105,127,127,112,127,127,-127,-127,30,-127,-127,94,127,-127,127,-30,-43,127,-127,127,127,127,-74,127,127,127,-118,102,110, 55,2,50,-12,6,-62,42,18,-24,10,-102,-8,2,-41,127,3,63,-66,-73,80,14,-48,12,-33,2,2,-39,69,22,40,1,4,33,-43,8,69,-5,65,60,-6,-78,15,-83,-29,28,-14,-9,8, 
  /* [0][2][][] */ -54,-7,26,-15,9,34,-37,23,9,-27,13,33,12,-6,-38,17,5,22,-11,100,6,-34,-16,-12,-2,23,-2,51,-8,3,51,-34,-18,-44,-35,-38,-2,29,5,-18,10,-11,41,-36,-36,18,-8,20, 68,123,75,22,18,-18,123,35,16,-7,43,26,0,0,-88,23,-59,-56,-33,115,-37,49,12,19,35,-63,-41,31,78,1,127,21,86,-26,5,-35,-27,-16,-11,125,-25,-18,-39,46,21,-30,10,-127, -42,-7,8,-2,7,-4,-63,8,-20,-16,-39,-42,28,-9,-6,10,34,23,-13,-127,24,-12,6,-9,-6,6,-11,-52,-13,8,6,9,-17,88,-40,-20,-6,37,20,-56,8,5,-37,8,-45,127,-3,-1, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015264131128787994, 0.014626722782850266, 0.0072012781165540218, 0.013716066256165504, 0.0054745464585721493, 0.0046414784155786037, 0.037015821784734726, 0.0057375035248696804, 0.0079075060784816742, 0.0085769854485988617, 0.004453795962035656, 0.011882334016263485, 0.010877487249672413, 0.0063631911762058735, 0.0047853868454694748, 0.0044447770342230797, 0.0080810664221644402, 0.010010739788413048, 0.003922964446246624, 0.0081024114042520523, 0.01210498996078968, 0.0087362751364707947, 0.010240479372441769, 0.0030214714352041483, 0.0068279351107776165, 0.0062173586338758469, 0.023119430989027023, 0.0042766518890857697, 0.0081777004525065422, 0.0050669591873884201, 0.0050912005826830864, 0.010488239116966724, 0.029211794957518578, 0.0084562720730900764, 0.011557683348655701, 0.0068476437591016293, 0.014630076475441456, 0.0036945219617336988, 0.013261072337627411, 0.00087349419482052326, 0.0037786068860441446, 0.002583472291007638, 0.0058784494176506996, 0.0068262424319982529, 0.0056506497785449028, 0.0076894452795386314, 0.01024774182587862, 0.0050601246766746044, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 73064, 9133, 6971, 8792, 1198, 11929, -2278, -168, 798, 3041, 4315, 717, 2213, -842, 1293, -2108, 3414, 10737, -290, 44319, 5056, 2851, 10431, -617, 3717, 6210, 24388, 10095, -62, -2576, 112, 3426, -2479, 11535, 2511, 6766, 8421, 4240, 27085, 2041, -1113, 3026, 1186, 6531, 4759, 2223, -1407, 3037, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 5.9047648392152041e-05, 0.00025572499725967646, 0.00022290139168035239, 0.0003715610655490309, 0.0017991178901866078, 0.00041781319305300713, 0.00084687629714608192, 0.001076702494174242, 0.00062271073693409562, 0.00046516736620105803, 0.00052744604181498289, 0.00037573222653008997, 0.0004500171635299921, 0.00054359325440600514, 0.0003693150938488543, 0.0017116015078499913, 0.00047282048035413027, 0.00039733044104650617, 0.0019109445856884122, 6.2859289755579084e-05, 0.00023106331354938447, 0.0003646357508841902, 0.00037578257615678012, 0.0009402334108017385, 0.00034325677552260458, 0.00018341257236897945, 0.00016577422502450645, 0.00036348140565678477, 0.0010891888523474336, 0.0010160962119698524, 0.00053478538757190108, 0.00028941594064235687, 0.0008452502079308033, 0.00019672529015224427, 0.00041560322279110551, 0.00025124414241872728, 0.00044243386946618557, 0.00030846608569845557, 8.7426546087954193e-05, 0.0022737400140613317, 0.00062999635701999068, 0.00094036210794001818, 0.00039991398807615042, 0.00024099502479657531, 0.00024951290106400847, 0.00047241681022569537, 0.00087840220658108592, 0.00087795831495895982, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 117,38,-7,21,127,83,-107,-60, 
  /* [1][0][][] */ -19,3,-10,127,8,-36,8,44, 
  /* [2][0][][] */ 43,-127,-32,53,-10,-73,103,18, 
  /* [3][0][][] */ 127,-80,10,8,6,-48,24,57, 
  /* [4][0][][] */ 36,-47,127,-17,-1,-66,25,-111, 
  /* [5][0][][] */ 93,-62,12,4,127,55,-51,73, 
  /* [6][0][][] */ 23,127,-34,126,0,70,-96,-70, 
  /* [7][0][][] */ -16,127,7,-8,6,-17,11,-14, 
  /* [8][0][][] */ 127,22,1,9,-54,-27,9,-6, 
  /* [9][0][][] */ -127,31,22,49,53,22,-9,-3, 
  /* [10][0][][] */ -68,-66,-18,127,50,38,-29,59, 
  /* [11][0][][] */ -127,5,35,-53,15,9,-45,-50, 
  /* [12][0][][] */ 127,40,-7,13,-36,5,11,-74, 
  /* [13][0][][] */ -5,88,-127,6,7,108,-92,72, 
  /* [14][0][][] */ -102,-57,17,127,33,31,3,-7, 
  /* [15][0][][] */ 7,127,-5,-4,-5,-16,15,-40, 
  /* [16][0][][] */ -7,-127,-15,-5,15,-84,79,-30, 
  /* [17][0][][] */ 28,127,-1,-9,-7,62,-83,-26, 
  /* [18][0][][] */ -7,57,-127,-17,13,49,-37,60, 
  /* [19][0][][] */ -98,9,18,-39,-127,13,-21,78, 
  /* [20][0][][] */ -127,27,9,-7,107,-70,42,-30, 
  /* [21][0][][] */ -55,-13,-5,12,-127,2,14,12, 
  /* [22][0][][] */ -127,-36,-3,7,109,-4,6,52, 
  /* [23][0][][] */ -26,-11,-2,-7,4,68,-127,-91, 
  /* [24][0][][] */ -10,49,-127,14,17,57,-22,78, 
  /* [25][0][][] */ 127,-34,-52,64,-113,-12,7,-39, 
  /* [26][0][][] */ 3,-25,-8,-4,-11,116,127,-23, 
  /* [27][0][][] */ 92,-8,-11,5,127,28,66,-11, 
  /* [28][0][][] */ -14,121,-51,-7,30,57,-31,127, 
  /* [29][0][][] */ -6,11,-4,-14,-2,84,-127,-83, 
  /* [30][0][][] */ 9,-5,1,-127,-5,3,-5,-17, 
  /* [31][0][][] */ -79,22,25,31,-127,1,15,0, 
  /* [32][0][][] */ 20,44,-11,-126,-3,18,-77,-127, 
  /* [33][0][][] */ -62,-26,0,6,-127,44,46,19, 
  /* [34][0][][] */ -127,25,2,36,18,7,13,2, 
  /* [35][0][][] */ -33,110,-32,-4,-1,-102,127,-38, 
  /* [36][0][][] */ -27,52,24,-28,-8,121,-127,-34, 
  /* [37][0][][] */ 64,-127,-47,48,0,-69,98,-36, 
  /* [38][0][][] */ 27,-127,3,20,4,60,-57,71, 
  /* [39][0][][] */ -4,-127,-4,-2,8,-17,-58,-92, 
  /* [40][0][][] */ 127,7,-6,18,-62,95,-96,-98, 
  /* [41][0][][] */ -1,-127,21,-5,-5,68,-61,105, 
  /* [42][0][][] */ 50,-18,-13,-127,-41,-15,32,-32, 
  /* [43][0][][] */ -127,-35,40,-124,110,15,-20,-39, 
  /* [44][0][][] */ 17,16,-21,9,-24,68,127,-44, 
  /* [45][0][][] */ -127,-34,-10,2,27,7,6,-17, 
  /* [46][0][][] */ 36,103,127,1,-18,35,40,49, 
  /* [47][0][][] */ 13,3,-21,127,-16,9,15,-7, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00014795313472859561, 0.00064075906993821263, 0.00055851438082754612, 0.00093100446974858642, 0.004507971927523613, 0.0010468964464962482, 0.0021219812333583832, 0.0026978468522429466, 0.001560299308039248, 0.0011655497364699841, 0.0013215986546128988, 0.00094145600451156497, 0.0011275885626673698, 0.0013620581012219191, 0.00092537683667615056, 0.0042886859737336636, 0.0011847257846966386, 0.00099557370413094759, 0.0047881710343062878, 0.00015750380407553166, 0.00057896535145118833, 0.00091365200933068991, 0.00094158214051276445, 0.0023559022229164839, 0.00086008367361500859, 0.00045956895337440073, 0.00041537330253049731, 0.0009107596124522388, 0.0027291334699839354, 0.0025459884200245142, 0.0013399885501712561, 0.00072517700027674437, 0.0021179069299250841, 0.00049292604671791196, 0.0010413590352982283, 0.00062953156884759665, 0.0011085873702540994, 0.0007729101344011724, 0.00021906092297285795, 0.0056972121819853783, 0.0015785546274855733, 0.0023562246933579445, 0.001002047210931778, 0.00060385081451386213, 0.0006251937011256814, 0.0011837143683806062, 0.0022009743843227625, 0.002199862152338028, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -12201, -28037, 24075, 24079, 4103, 3488, 36893, 5422, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00079915672540664673, 0.0006030454533174634, 0.00096646964084357023, 0.0012220399221405387, 0.00099943159148097038, 0.001204740023240447, 0.00067778961965814233, 0.00075111218029633164, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,15,7,-114,21,25,2,17,0,3,-1,-3,127,0,1,7,0,3,-2,-4,98,6,-2,4,41,49,14,-16,0,5,12,-126,23,-4,3,8,-25,6,-21,38,8,-18,-6,8,6,-1,6,7, 
  /* [1][0][][] */ -41,-8,-6,-11,49,25,-37,89,19,4,-28,-18,17,0,17,32,0,41,18,-54,1,26,127,21,-21,12,64,6,19,-12,20,-8,15,-8,-5,-9,0,-61,14,3,-16,-6,-79,-9,-44,7,-50,-77, 
  /* [2][0][][] */ -62,18,-3,16,42,-17,29,29,-4,48,16,-14,-9,0,3,43,0,14,-127,22,-14,8,7,-15,-31,7,38,7,10,32,13,-3,1,-2,-13,-24,13,1,11,2,40,-12,-30,-4,21,-55,23,13, 
  /* [3][0][][] */ 3,-11,0,9,-8,35,-1,0,55,0,-1,7,20,0,-22,9,0,-8,2,-1,-8,-5,3,-4,-15,-20,-2,7,-1,-6,-7,-9,-38,24,-54,5,-1,8,9,-127,-2,4,0,-35,3,-3,-1,4, 
  /* [4][0][][] */ 1,-1,72,37,3,-16,4,1,-1,0,-5,-11,-79,0,-13,6,0,11,1,0,68,1,0,-1,-17,23,2,62,-12,-3,-1,95,4,-1,2,2,9,-18,-16,-17,-2,-127,5,9,-1,-4,-1,0, 
  /* [5][0][][] */ -4,37,7,-8,-6,54,25,8,-28,29,7,53,22,0,-127,-6,0,6,-39,23,-14,2,-11,35,-25,-1,19,-9,-15,29,16,-20,53,22,-35,1,4,21,-45,19,29,-13,-11,35,26,54,21,22, 
  /* [6][0][][] */ -19,-67,-2,4,45,-57,-21,2,29,-33,-11,92,-18,0,-127,45,0,-15,51,-20,0,2,28,-20,32,-7,-13,-12,47,-13,-15,-26,123,-42,30,-4,-4,-11,-84,-35,-8,-16,-16,-27,-28,-71,-24,-37, 
  /* [7][0][][] */ -110,-18,-15,9,127,6,68,27,7,7,30,-33,-30,0,95,104,0,13,-2,65,-17,6,-26,45,18,0,56,14,42,51,52,-11,-7,-5,-27,-19,4,29,23,29,73,0,-26,-5,60,13,74,83, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.033964160829782486, 0.025629431009292603, 0.041074957698583603, 0.051936693489551544, 0.04247584193944931, 0.051201451569795609, 0.028806058689951897, 0.031922265887260437, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 71014, 53801, 62304, 43076, 364, 13846, 1360, 28083, 31680, 25920, 29178, 9289, -44451, -127, 42588, 929, -204, 30539, 4393, 2060, -13114, 7939, 49321, 32820, -14647, 33509, 41364, 25990, -2307, 14225, -6694, -56368, 9857, 87852, 32976, 1167, 57180, 42, 126655, -27556, 12964, -25571, 2038, 88891, -1344, 77033, 2007, -23618, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.5937404946889728e-05, 7.4277202656958252e-05, 0.00011189067299710587, 9.4111681391950697e-05, 0.00014224815822672099, 0.00020319993200246245, 0.00015072969836182892, 6.2410908867605031e-05, 7.5174131779931486e-05, 3.2482716051163152e-05, 8.8995409896597266e-05, 2.6979834728990681e-05, 0.00016794637485872954, 0.005541567225009203, 6.0913120250916108e-05, 0.00020617374684661627, 0.0027484172023832798, 2.0224433683324605e-05, 7.1659414970781654e-05, 0.00019033394346479326, 0.00010952235606964678, 0.00015037647972349077, 0.00011857011122629046, 3.4295404475415125e-05, 8.3857077697757632e-05, 8.208771760109812e-05, 3.4266166039742529e-05, 4.1170322219841182e-05, 0.00028895176365040243, 4.9191658035852015e-05, 4.1662093281047419e-05, 0.00019980974320787936, 0.00026636064285412431, 9.2653444880852476e-06, 7.7777360274922103e-05, 0.0001615016080904752, 1.2470884939830285e-05, 0.00052348978351801634, 3.586921957321465e-05, 8.974709635367617e-05, 6.1797785747330636e-05, 0.00015182037896011025, 9.6357340225949883e-05, 9.7307110991096124e-06, 0.00015647287364117801, 7.6114039984531701e-05, 0.00018875001114793122, 0.00012359701213426888, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -46,-23,-8,-18,9,-39,-79,-69,-21,-57,6,67,33,-71,115,-45,-113,-84,35,-8,1,-75,-111,-80,-33,-126,-67,-29,75,18,97,32,-127,-86,-5,53,19,49,-127,84,-77,-13,108,-116,-4,-35,-86,107, 76,14,-29,-29,59,-127,-127,-81,60,-79,-116,115,41,-82,1,64,-52,-113,60,6,13,-113,-127,-72,0,-127,-119,-42,-55,23,-58,53,28,-127,63,83,11,75,-94,127,-127,6,127,-127,1,-22,-127,95, -34,47,6,-9,-68,-110,-59,-19,88,-10,-127,42,8,-71,-98,-12,-127,-25,27,13,-16,-76,-38,-22,-9,-30,-58,-18,-10,19,-23,14,101,-85,73,29,16,35,-7,20,-80,4,7,-83,-18,6,-55,17, 
  /* [0][1][][] */ -87,-127,-45,-45,-9,54,100,-106,-21,-112,-19,107,88,-64,27,-98,-121,-95,88,-77,43,-93,-105,-127,43,-120,-82,-47,127,-61,127,91,-44,-84,-13,88,-39,-78,-107,93,46,61,107,-113,-91,-117,80,119, 127,-81,-127,-127,127,40,96,-127,99,-127,-109,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-122,-117,127,-98,-127,-127,-122,-127,-70,127,28,-108,127,127,-71,-127,-99,89,63,127,127,-116,-112,-127,122,127, -54,33,-61,-91,-125,-25,32,-38,127,-21,-76,32,54,-70,-24,-45,-37,-32,53,-70,53,-76,-39,-23,46,-2,-46,-61,18,-90,-34,25,29,-97,125,24,-36,-64,-1,-11,41,54,10,-80,-58,-37,65,35, 
  /* [0][2][][] */ -65,-110,-33,-33,1,36,-2,-36,-32,-60,-13,57,74,-127,-127,-63,-43,-19,64,74,53,-33,-13,-61,29,-53,-11,-70,75,31,78,69,99,-29,-38,-8,-93,34,-17,27,8,37,13,-60,97,-80,1,28, 86,-74,-86,-82,81,20,9,-45,50,-70,-29,56,81,-26,15,96,-24,-29,79,117,81,-58,-19,-54,91,-65,-18,-103,-53,41,-43,112,-17,-49,65,8,-127,49,-17,-7,9,30,16,-66,127,-100,-13,37, -30,28,-41,-36,-84,-18,23,-10,61,-6,-11,30,29,-43,111,-29,-93,-7,29,60,69,-31,-1,-3,38,6,-5,-71,-11,30,-19,45,-88,-44,71,1,-17,19,23,-43,6,34,-5,-18,63,-36,-4,16, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.00365233956836164, 0.0031567809637635946, 0.0047553535550832748, 0.0039997464045882225, 0.0060455463826656342, 0.0086359968408942223, 0.0064060119912028313, 0.0026524635031819344, 0.0031949004624038935, 0.0013805154012516141, 0.0037823047023266554, 0.0011466429568827152, 0.0071377209387719631, 0.23551659286022186, 0.0025888076052069664, 0.008762383833527565, 0.1168077290058136, 0.00085953838424757123, 0.0030455251690000296, 0.0080891922116279602, 0.0046546999365091324, 0.0063910000026226044, 0.0050392295233905315, 0.0014575546374544501, 0.0035639258567243814, 0.0034887278452515602, 0.0014563120203092694, 0.001749738585203886, 0.012280449271202087, 0.0020906454883515835, 0.0017706389771774411, 0.0084919137880206108, 0.011320327408611774, 0.00039377712528221309, 0.0033055376261472702, 0.0068638180382549763, 0.00053001259220764041, 0.022248314693570137, 0.0015244417591020465, 0.0038142516277730465, 0.0026264057960361242, 0.0064523657783865929, 0.0040951869450509548, 0.00041355521534569561, 0.0066500967368483543, 0.0032348467502743006, 0.0080218752846121788, 0.0052528730593621731, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3969, 209, 6364, 5219, 5969, 7401, 9912, -36, -69, -190, 2023, 344, 10686, -69556224, 2558, 15048, -56149396, -97, -370, 9974, 3230, -9, 72, 283, 3034, -766, 53, 449, 3035, 1614, 2003, 15949, 3050, 260, 63, -1725, 330, 1900, -164, 10111, 1721, 8000, -178, -84, 11565, 83, 7014, 4395, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00051331735448911786, 0.0004199793329462409, 0.00048560637515038252, 0.00034379414864815772, 0.00034396714181639254, 0.00028595924959518015, 0.00037604777025990188, 0.00159461610019207, 0.0004705560568254441, 0.0033882339484989643, 0.00074714916991069913, 0.0023990818299353123, 0.00020115518418606371, 2.3316915065407784e-09, 0.0010470513952895999, 0.00022063692449592054, 2.3316915065407784e-09, 0.0075841112993657589, 0.00050660723354667425, 0.00038331371615640819, 0.00030764407711103559, 0.0053857332095503807, 0.00037807415355928242, 0.0018338317750021815, 0.0012085350463166833, 0.00073180417530238628, 0.002597414655610919, 0.0028971827123314142, 0.00037048186641186476, 0.0017888583242893219, 0.0014928248710930347, 0.00015259400242939591, 0.00023479541414417326, 0.012374469079077244, 0.00072663091123104095, 0.00067844596924260259, 0.0041728951036930084, 0.00065711757633835077, 0.002821486908942461, 0.00035766442306339741, 0.0015826390590518713, 0.00027102898457087576, 0.00056759046856313944, 0.010833923704922199, 0.00042753529851324856, 0.00059695099480450153, 0.00040836521657183766, 0.00020726678485516459, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 19,-127,61,-37,44,-15,-69,8, 
  /* [1][0][][] */ 90,115,-28,-122,19,7,-127,109, 
  /* [2][0][][] */ 18,-8,-39,103,19,127,51,72, 
  /* [3][0][][] */ 94,87,-109,127,-125,-4,17,34, 
  /* [4][0][][] */ -43,-98,65,14,-15,34,-20,-127, 
  /* [5][0][][] */ 13,-1,-38,79,28,-54,52,127, 
  /* [6][0][][] */ 59,-10,-118,-104,127,43,32,-48, 
  /* [7][0][][] */ 127,24,18,-30,38,-14,98,-79, 
  /* [8][0][][] */ -3,-96,20,116,-14,30,-3,-127, 
  /* [9][0][][] */ 87,-107,16,-9,-19,10,-127,55, 
  /* [10][0][][] */ -97,-61,-127,6,-24,5,-71,59, 
  /* [11][0][][] */ -15,-41,-8,-89,-127,-21,49,-22, 
  /* [12][0][][] */ 6,-12,-57,80,-81,-20,84,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 0,-23,-5,7,31,127,52,62, 
  /* [15][0][][] */ 37,4,-6,-127,52,35,-23,87, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 12,11,127,30,-35,-6,35,29, 
  /* [18][0][][] */ 87,-127,13,53,-7,4,-80,19, 
  /* [19][0][][] */ -127,-8,44,48,-102,-93,-125,70, 
  /* [20][0][][] */ 31,27,-50,127,-20,-107,13,81, 
  /* [21][0][][] */ 61,19,127,19,-10,-4,61,7, 
  /* [22][0][][] */ -89,-21,-127,6,10,12,-96,3, 
  /* [23][0][][] */ -95,117,-19,-8,-3,-12,127,-75, 
  /* [24][0][][] */ 3,-52,-51,77,-4,-80,93,127, 
  /* [25][0][][] */ 19,27,36,29,114,127,-79,-51, 
  /* [26][0][][] */ -95,-28,-127,-5,10,20,-93,-9, 
  /* [27][0][][] */ -4,-27,-24,-10,-15,127,43,41, 
  /* [28][0][][] */ 7,-21,-21,47,3,127,38,33, 
  /* [29][0][][] */ 103,20,119,13,-19,-16,127,13, 
  /* [30][0][][] */ -82,127,-9,-17,20,2,80,-60, 
  /* [31][0][][] */ -49,-79,-15,-20,45,-92,120,127, 
  /* [32][0][][] */ 3,-9,-58,122,-38,55,104,127, 
  /* [33][0][][] */ 6,44,-12,-102,8,-11,3,127, 
  /* [34][0][][] */ 5,45,-20,-55,27,-9,4,127, 
  /* [35][0][][] */ 89,-10,-36,-35,2,6,127,-20, 
  /* [36][0][][] */ -127,-27,-2,94,-30,-8,-73,104, 
  /* [37][0][][] */ -12,-12,-8,4,28,127,40,26, 
  /* [38][0][][] */ 18,27,8,84,127,-4,-22,37, 
  /* [39][0][][] */ 7,31,24,-76,28,-14,-24,127, 
  /* [40][0][][] */ 89,12,127,-1,-15,-14,97,-6, 
  /* [41][0][][] */ -1,-32,-28,78,31,127,75,91, 
  /* [42][0][][] */ -87,-24,127,19,-20,16,-33,79, 
  /* [43][0][][] */ -12,-72,13,97,-15,5,20,-127, 
  /* [44][0][][] */ 44,-1,-71,-110,57,-17,-2,-127, 
  /* [45][0][][] */ -98,127,0,-34,18,-9,76,-70, 
  /* [46][0][][] */ -127,-8,49,26,-38,17,-72,37, 
  /* [47][0][][] */ 114,22,125,15,7,5,127,-17, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.000866724643856287, 0.00070912553928792477, 0.00081993528874590993, 0.00058048858772963285, 0.00058078067377209663, 0.00048283566138707101, 0.00063494808273389935, 0.0026924728881567717, 0.00079452316276729107, 0.0057209557853639126, 0.0012615442974492908, 0.0040507949888706207, 0.000339645950589329, 3.937008052901092e-09, 0.0017679224256426096, 0.00037254040944389999, 3.937008052901092e-09, 0.01280559878796339, 0.00085539475549012423, 0.00064721645321696997, 0.00051944999722763896, 0.0090936878696084023, 0.00063836958725005388, 0.0030963830649852753, 0.002040583873167634, 0.0012356346705928445, 0.0043856753036379814, 0.0048918267711997032, 0.00062555016484111547, 0.003020446514710784, 0.0025206007994711399, 0.00025765149621292949, 0.00039644670323468745, 0.020894009619951248, 0.0012268996797502041, 0.0011455405037850142, 0.0070458380505442619, 0.001109528006054461, 0.0047640162520110607, 0.00060390820726752281, 0.0026722499169409275, 0.0004576262435875833, 0.00095836358377709985, 0.018292833119630814, 0.00072188361082226038, 0.0010079381754621863, 0.0006895153783261776, 0.00034996523754671216, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -159, -45265, -9116, -9667, -27717, -601, -24511, -26382, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0023283339105546474, 0.0025487046223133802, 0.0025219535455107689, 0.0011216431157663465, 0.0011483343550935388, 0.0025807321071624756, 0.0014495103387162089, 0.0010194451315328479, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-28,9,-5,127,-2,-3,-5,-1,-124,-84,-3,0,112,3,0, 
  /* [1][0][][] */ 0,-29,11,81,80,8,28,8,-1,-4,127,-48,0,27,-8,0, 
  /* [2][0][][] */ 0,-2,-5,-12,-48,5,15,-2,-1,10,-21,3,0,127,-4,0, 
  /* [3][0][][] */ 0,-8,-17,-127,80,18,60,9,0,62,0,52,0,-1,24,0, 
  /* [4][0][][] */ 0,34,-25,37,-46,20,127,-5,1,-48,12,-15,0,0,10,0, 
  /* [5][0][][] */ 0,-16,-13,0,-21,-20,-24,17,-1,11,-4,-37,0,-4,127,0, 
  /* [6][0][][] */ 0,5,8,2,41,-18,-28,-2,-1,-117,121,66,0,127,56,0, 
  /* [7][0][][] */ 0,16,-11,127,10,-8,15,3,1,64,-47,81,0,-12,45,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.098954185843467712, 0.10831994563341141, 0.10718302428722382, 0.047669831663370132, 0.048804208636283875, 0.10968111455440521, 0.061604190617799759, 0.043326418846845627, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 24548, 67770, 12865, 11290, 135015, 12459, 30015, -10546, 6083, 30739, 14314, -445, 26591, 12295, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00010476726311026141, 5.9141115343663841e-05, 0.00027705283719114959, 0.0001607059093657881, 2.4552526156185195e-05, 0.00039016333175823092, 0.00013093280722387135, 2.0666529962909408e-05, 0.00029022633680142462, 0.00018658224144019186, 0.0007546435808762908, 0.00072724185883998871, 0.00023421303194481879, 0.00016495732415933162, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,39,-67,80,-75,-90,-3,-8,30,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,6,127,-25, 24,-24,90,-2,-73,65,-94,80,-95,-27,4,-16,61,2,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,14,-28,16,-28,1,3,-107,-49,9,-29,-14, -78,-41,-57,-15,-8,-27,8,-26,-108,-89,21,-11,-104,-127,1,23, 14,1,64,2,3,32,-25,35,-127,7,-1,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-7,37,-39,55,-76,0,-1,4,40,2,-27,23, 23,-4,31,-2,-27,38,-34,23,-125,-13,-1,83,-58,0,-28,-111, 21,-7,19,0,4,13,9,24,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0044526085257530212, 0.002513497369363904, 0.011774744838476181, 0.0068300012499094009, 0.0010434823343530297, 0.016581941395998001, 0.0055646440014243126, 0.00087832752615213394, 0.012334619648754597, 0.0079297451302409172, 0.032072350382804871, 0.030907778069376945, 0.0099540539085865021, 0.0070106862112879753, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 14632, -75026, 24109, 399000, 19144, 83128, 13526, -165834, 46097, 38566, 1644256, -1073741824, 53227, 60135, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00017483784176874906, 0.0002280556655023247, 3.36916018568445e-05, 8.6039917732705362e-06, 0.00015241529035847634, 4.3412455852376297e-05, 0.00013794742699246854, 5.0559747251099907e-06, 3.7926783988950774e-05, 7.836519944248721e-05, 3.4843571938836249e-06, 1.1533876076441629e-09, 7.2289207309950143e-05, 3.7807985791005194e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 37,4,35, -4,-6,25, -127,-94,-49, 
  /* [1][1][][] */ -6,-2,3, -25,7,1, -18,-31,5, 
  /* [1][2][][] */ -12,18,4, -10,11,4, 22,-16,14, 
  /* [2][0][][] */ 11,-5,1, 65,116,7, 16,-53,0, 
  /* [2][1][][] */ -3,13,4, 57,127,-23, -5,-22,-15, 
  /* [2][2][][] */ 48,-64,23, 74,-43,-18, 21,-64,9, 
  /* [3][0][][] */ 29,50,-6, 50,101,-4, 11,15,-13, 
  /* [3][1][][] */ 32,44,-9, 86,127,-8, -4,-11,-6, 
  /* [3][2][][] */ 11,-4,-18, 34,13,-30, 9,7,-7, 
  /* [4][0][][] */ 26,85,-45, 7,103,-53, 34,76,12, 
  /* [4][1][][] */ 14,72,7, -7,95,-29, 67,95,-30, 
  /* [4][2][][] */ 77,100,16, 61,127,-35, 15,54,6, 
  /* [5][0][][] */ 4,-16,-127, -8,-12,-105, -3,30,-18, 
  /* [5][1][][] */ 2,-58,-125, -5,-58,-112, 4,18,-6, 
  /* [5][2][][] */ 0,4,-13, 5,-5,-5, 10,19,1, 
  /* [6][0][][] */ 18,-66,34, 45,-87,40, 6,-22,8, 
  /* [6][1][][] */ 29,-99,61, 61,-127,72, 4,-30,16, 
  /* [6][2][][] */ 14,-36,16, 12,-43,28, -15,6,0, 
  /* [7][0][][] */ -37,22,-14, -127,-45,-30, -35,26,-18, 
  /* [7][1][][] */ -15,-19,-30, -117,-111,-45, 0,-8,-17, 
  /* [7][2][][] */ -31,30,-30, -8,14,-18, -19,32,-12, 
  /* [8][0][][] */ 72,88,47, 77,93,53, 83,127,54, 
  /* [8][1][][] */ 69,83,43, 72,87,47, 78,120,45, 
  /* [8][2][][] */ 70,83,42, 75,89,46, 81,120,44, 
  /* [9][0][][] */ -16,-2,22, -7,-10,12, 3,0,-2, 
  /* [9][1][][] */ 82,105,-1, 73,127,32, -5,20,38, 
  /* [9][2][][] */ -31,-26,9, -6,-32,-6, 7,2,-21, 
  /* [10][0][][] */ -25,-82,-18, 34,95,20, -9,-12,-2, 
  /* [10][1][][] */ -59,-102,-13, 78,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-10, -8,0,8, 
  /* [11][0][][] */ -46,-40,9, -24,-59,12, -4,-111,-49, 
  /* [11][1][][] */ -63,-43,2, -56,-67,-20, -22,-59,-42, 
  /* [11][2][][] */ -8,-49,-99, 125,127,53, -39,10,-61, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-18, -62,-112,-26, -9,-18,-6, 
  /* [13][1][][] */ 62,114,15, 58,127,24, 8,15,11, 
  /* [13][2][][] */ -8,-20,3, 2,-19,-2, 2,4,-4, 
  /* [14][0][][] */ 40,-6,-46, 75,-26,-57, 32,-7,-24, 
  /* [14][1][][] */ 86,-16,-81, 127,-36,-90, 63,-11,-35, 
  /* [14][2][][] */ 59,-3,-49, 77,-15,-54, 28,0,-18, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.044583648443222046, 0.058154191821813583, 0.0085913576185703278, 0.0021940178703516722, 0.038865897804498672, 0.011070176027715206, 0.035176590085029602, 0.001289273495785892, 0.0096713295206427574, 0.019983123987913132, 0.00088851101463660598, 2.9411381774480105e-07, 0.018433745950460434, 0.0096410354599356651, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.59224963188171387, } };
const TfArray<1, int> quant46_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.39909696578979492, } };
const TfArray<1, int> quant50_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.51383912563323975, } };
const TfArray<1, int> quant53_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.54315805435180664, } };
const TfArray<1, int> quant54_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28269538283348083, } };
const TfArray<1, int> quant58_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22053083777427673, } };
const TfArray<1, int> quant61_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.28501799702644348, } };
const TfArray<1, int> quant62_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.24135661125183105, } };
const TfArray<1, int> quant65_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.31261757016181946, } };
const TfArray<1, int> quant66_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.057463176548480988, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.14813524484634399, } };
const TfArray<1, int> quant69_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
